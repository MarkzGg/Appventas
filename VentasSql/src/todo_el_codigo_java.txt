

----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\ApiController.java -----

package com.example.VentasSql.Controller;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ApiController {
    @GetMapping("/api/seguro")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") 
    public String contenidoProtegido(){
        return "Este es un contenido protegido con JWT. ¡Acceso autorizado!";
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\AuthController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Dto.AuthRequest;
import com.example.VentasSql.Dto.AuthResponse;
import com.example.VentasSql.Dto.RegisterRequest; // Importamos el nuevo DTO
import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Repository.UserRepository;
import com.example.VentasSql.Seguridad.JwtUtil;
import com.example.VentasSql.Entidad.Role;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize; // Importar
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

@RestController
@RequiredArgsConstructor
public class AuthController {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    private final JwtUtil jwtUtil;

    @PostMapping("/registro")
    public String registrar(@RequestBody AuthRequest auth){
        if (userRepository.findByUsername(auth.getUsername()).isPresent()) {
            return "El nombre de usuario ya existe.";
        }
        Uuser u = Uuser.builder()
                .username(auth.getUsername())
                .password(passwordEncoder.encode(auth.getPassword()))
                .role(Role.USER) // Asignamos el rol USER por defecto
                .build();
        userRepository.save(u);
        return "Usuario registrado correctamente con rol USER.";
    }

    
    @PostMapping("/admin/registro-usuario")
    @PreAuthorize("hasRole('ADMIN')") 
    public ResponseEntity<String> registrarUsuarioConRol(@RequestBody RegisterRequest request){
        if (userRepository.findByUsername(request.getUsername()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("El nombre de usuario ya existe.");
        }
        Uuser u = Uuser.builder()
                .username(request.getUsername())
                .password(passwordEncoder.encode(request.getPassword()))
                .nombre(request.getNombre()) // Asignamos el nombre
                .role(request.getRole()) 
                .build();
        userRepository.save(u);
        String token = jwtUtil.generateToken(u.getUsername(), u.getRole().name());
        return ResponseEntity.ok("Usuario registrado correctamente con rol " + request.getRole().name() + ".");
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/admin/asignar-rol")
    public ResponseEntity<String> asignarRol(@RequestParam String username, @RequestParam Role nuevoRol) {
        Uuser user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

        user.setRole(nuevoRol);
        userRepository.save(user);
        return ResponseEntity.ok("Rol actualizado a " + nuevoRol.name());
    }

    @PostMapping("/registro-comprador")
    public ResponseEntity<String> registrarComprador(@RequestBody AuthRequest auth) {
        if (userRepository.findByUsername(auth.getUsername()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("El nombre de usuario ya existe.");
        }

        Uuser comprador = Uuser.builder()
                .username(auth.getUsername())
                .password(passwordEncoder.encode(auth.getPassword()))
                .role(Role.COMPRADOR)
                .build();

        userRepository.save(comprador);
        return ResponseEntity.ok("Comprador registrado correctamente.");
    }


    @PostMapping("/auth/login")
    public AuthResponse login(@RequestBody AuthRequest request){
        try {
            System.out.println("Intentando autenticar: " + request.getUsername());
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword()));
            System.out.println("Autenticación exitosa para: " + request.getUsername());
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Error de autenticación: " + e.getMessage());
        }

        Uuser user = userRepository.findByUsername(request.getUsername())
                .orElseThrow(() -> new RuntimeException("Usuario no encontrado después de autenticación."));

        String token = jwtUtil.generateToken(request.getUsername(), user.getRole().name());
        return new AuthResponse(token);
    }
    @PutMapping("/admin/editar-usuario/{id}")
@PreAuthorize("hasRole('ADMIN')")
public ResponseEntity<String> editarUsuario(@PathVariable Long id, @RequestBody RegisterRequest request) {
    Uuser usuario = userRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

    // Actualizar los campos del usuario
    usuario.setUsername(request.getUsername());
    if (request.getPassword() != null && !request.getPassword().isEmpty()) {
        usuario.setPassword(passwordEncoder.encode(request.getPassword())); // Codificar la nueva contraseña
    }
    usuario.setNombre(request.getNombre());
    usuario.setRole(request.getRole());

    userRepository.save(usuario);
    return ResponseEntity.ok("Usuario actualizado correctamente.");
}


    @GetMapping("/token-visitante")
    public AuthResponse generarTokenVisitante() {
        String token = jwtUtil.generateToken("anonimo", Role.VISITANTE.name());
        return new AuthResponse(token);
    }



}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\BoletaController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Dto.PedidoRequest;
import com.example.VentasSql.Entidad.Boleta;
import com.example.VentasSql.Entidad.DetalleBoleta;
import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Repository.BoletaRepository;
import com.example.VentasSql.Repository.DetalleBoletaRepository;
import com.example.VentasSql.Repository.ProductoRepository;
import com.example.VentasSql.Repository.UserRepository;
import java.security.Principal;
import com.example.VentasSql.Service.BoletaPdfService; // Importa tu nuevo servicio de PDF
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType; // Importa MediaType
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin; // Importa CrossOrigin

import java.io.ByteArrayInputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.security.Principal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/boletas")
@RequiredArgsConstructor
@CrossOrigin(origins = "http://localhost:4200") // ¡IMPORTANTE! Asegúrate de que esta anotación esté aquí
public class BoletaController {

    private final BoletaRepository boletaRepository;
    private final ProductoRepository productoRepository;
    private final DetalleBoletaRepository detalleBoletaRepository;
    private final UserRepository userRepository;
    private final BoletaPdfService boletaPdfService; // Inyecta el servicio de PDF

    private static final BigDecimal IGV_RATE = new BigDecimal("0.18");

    @PostMapping("/generar")
    @PreAuthorize("permitAll()") // Accesible por USER y ADMIN
    @Transactional
    
    public ResponseEntity<?> generarBoleta(@Valid @RequestBody List<PedidoRequest> pedidos, Principal principal) {
        try {
            if (pedidos == null || pedidos.isEmpty()) {
                return ResponseEntity.badRequest().body("La lista de pedidos no puede estar vacía.");
            }

            Map<Long, Integer> productosEnPedido = new HashMap<>();
            for (PedidoRequest p : pedidos) {
                productosEnPedido.merge(p.getProductoId(), p.getCantidad(), Integer::sum);
            }

            List<DetalleBoleta> detallesBoleta = new ArrayList<>();
            BigDecimal subtotalGeneral = BigDecimal.ZERO;
            StringBuilder mensajeStockInsuficiente = new StringBuilder();

            // Primera pasada: Verificar stock y calcular subtotal por producto
            for (Map.Entry<Long, Integer> entry : productosEnPedido.entrySet()) {
                Long productoId = entry.getKey();
                Integer cantidadSolicitada = entry.getValue();

                Producto producto = productoRepository.findById(productoId)
                        .orElse(null);

                if (producto == null) {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Producto con ID " + productoId + " no encontrado.");
                }

                if (producto.getStock() < cantidadSolicitada) {
                    mensajeStockInsuficiente.append("No hay stock suficiente para el producto '")
                            .append(producto.getNombre())
                            .append("'. Stock disponible: ")
                            .append(producto.getStock())
                            .append(". Cantidad solicitada: ")
                            .append(cantidadSolicitada)
                            .append(".\n");
                } else {
                    BigDecimal precioUnitario = producto.getPrecio();
                    BigDecimal subtotalDetalle = precioUnitario.multiply(BigDecimal.valueOf(cantidadSolicitada));
                    subtotalGeneral = subtotalGeneral.add(subtotalDetalle);

                    DetalleBoleta detalle = new DetalleBoleta();
                    detalle.setProducto(producto);
                    detalle.setCantidad(cantidadSolicitada);
                    detalle.setPrecioUnitario(precioUnitario);
                    detalle.setSubtotalDetalle(subtotalDetalle);
                    detallesBoleta.add(detalle);
                }
            }

            if (mensajeStockInsuficiente.length() > 0) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(mensajeStockInsuficiente.toString());
            }

            String numeroBoleta = generarSiguienteNumeroBoleta();

            BigDecimal igvCalculado = subtotalGeneral.multiply(IGV_RATE).setScale(2, RoundingMode.HALF_UP);
            BigDecimal totalGeneral = subtotalGeneral.add(igvCalculado).setScale(2, RoundingMode.HALF_UP);

            Boleta boleta = new Boleta();
            boleta.setNumeroBoleta(numeroBoleta);
            boleta.setFechaEmision(LocalDateTime.now());
            boleta.setSubtotal(subtotalGeneral.setScale(2, RoundingMode.HALF_UP));
            boleta.setIgv(igvCalculado);
            boleta.setTotal(totalGeneral);
            boleta.setDetalles(detallesBoleta);

            // >>> ASIGNAR EL USUARIO A LA BOLETA <<<
            // Necesitas el usuario logueado para asignar la boleta al comprador
            // Si el usuario siempre está autenticado al generar una boleta, puedes usar Principal.
            // Si no, debes pasar el ID de usuario en el PedidoRequest o de alguna otra forma.
            // Ejemplo usando Principal:
            if (principal != null) {
                Uuser usuario = userRepository.findByUsername(principal.getName())
                                              .orElseThrow(() -> new RuntimeException("Usuario autenticado no encontrado."));
                boleta.setUsuario(usuario);
            } else {
                // Manejo de caso donde no hay Principal (ej. para pruebas o si permites compras como invitado)
                // Podrías asignar un usuario por defecto o requerir que el usuario esté logueado
                System.err.println("Advertencia: Boleta generada sin usuario autenticado.");
            }
            // <<< FIN ASIGNAR USUARIO >>>

            boletaRepository.save(boleta);

            for (DetalleBoleta detalle : detallesBoleta) {
                detalle.setBoleta(boleta);
                detalleBoletaRepository.save(detalle);

                // Actualizar stock del producto
                Producto producto = detalle.getProducto();
                producto.setStock(producto.getStock() - detalle.getCantidad());
                productoRepository.save(producto);
            }

            // Aquí se devuelve un mensaje de confirmación, no el PDF
            StringBuilder mensajeBoleta = new StringBuilder();
            mensajeBoleta.append("Boleta generada con éxito. Número de Boleta: ").append(boleta.getNumeroBoleta());
            return ResponseEntity.ok(java.util.Map.of("message", mensajeBoleta.toString(), "boletaId", boleta.getId()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(java.util.Map.of("error", "Error al generar la boleta: " + e.getMessage()));
        }
    }

    private String generarSiguienteNumeroBoleta() {
        Boleta ultimaBoleta = boletaRepository.findTopByOrderByFechaEmisionDesc();
        String ultimoNumeroStr = null;
        if (ultimaBoleta != null && ultimaBoleta.getNumeroBoleta() != null) {
            ultimoNumeroStr = ultimaBoleta.getNumeroBoleta().replaceAll("[^\\d]", ""); // Extraer solo dígitos
        }
        int ultimoNumero = 0;
        if (ultimoNumeroStr != null && !ultimoNumeroStr.isEmpty()) {
            try {
                ultimoNumero = Integer.parseInt(ultimoNumeroStr);
            } catch (NumberFormatException e) {
                System.err.println("Error al parsear el número de boleta: " + ultimaBoleta.getNumeroBoleta());
            }
        }
        // Asumiendo que el formato es "BOLETA-XXXX"
        return String.format("BOLETA-%05d", ultimoNumero + 1); // Formato de 5 dígitos
    }

    @GetMapping("/historial")
    @PreAuthorize("hasAnyRole('COMPRADOR', 'ADMIN','USER')")
    @Transactional
    public ResponseEntity<?> obtenerHistorialBoletas(Principal principal) {
        Uuser usuario = userRepository.findByUsername(principal.getName()).orElseThrow();
        List<Boleta> historial = boletaRepository.findByUsuario(usuario);
        return ResponseEntity.ok(historial);
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @Transactional
    public ResponseEntity<String> eliminarBoleta(@PathVariable Long id) {
        try {
            Boleta boleta = boletaRepository.findById(id)
                    .orElseThrow(() -> new RuntimeException("Boleta con ID " + id + " no encontrada."));
            // Opcional: Revertir stock de productos antes de eliminar la boleta
            for (DetalleBoleta detalle : boleta.getDetalles()) {
                Producto producto = detalle.getProducto();
                producto.setStock(producto.getStock() + detalle.getCantidad());
                productoRepository.save(producto);
            }
            boletaRepository.delete(boleta);
            return ResponseEntity.ok("Boleta eliminada correctamente. El stock de los productos ha sido revertido.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error al eliminar la boleta: " + e.getMessage());
        }
    }

    // >>> NUEVO ENDPOINT PARA DESCARGAR PDF <<<
    @GetMapping("/{id}/pdf") // Este es el endpoint que tu frontend de Angular está llamando
    @PreAuthorize("hasAnyRole('COMPRADOR', 'ADMIN')") // Permite acceso a compradores y administradores
    @Transactional
    public ResponseEntity<InputStreamResource> descargarBoletaPdf(@PathVariable Long id) {
        try {
            // 1. Buscar la boleta por ID
            Boleta boleta = boletaRepository.findById(id)
                    .orElseThrow(() -> new RuntimeException("Boleta con ID " + id + " no encontrada."));

            // 2. Generar el PDF usando el servicio
            byte[] pdfBytes = boletaPdfService.generarPdfBoleta(boleta);

            // 3. Preparar la respuesta HTTP para el PDF
            ByteArrayInputStream bis = new ByteArrayInputStream(pdfBytes);

            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=boleta_" + boleta.getNumeroBoleta() + ".pdf");

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentType(MediaType.APPLICATION_PDF)
                    .body(new InputStreamResource(bis));

        } catch (RuntimeException e) { // Captura si la boleta no se encuentra
            System.err.println("Error al descargar PDF: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build(); // Devuelve 404
        } catch (Exception e) { // Captura otros errores (ej. al generar el PDF)
            e.printStackTrace(); // Imprime la traza completa del error en la consola del servidor
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null); // Devuelve 500
        }
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\CarritoController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Entidad.CarritoItem;
import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Dto.PedidoRequest;
import com.example.VentasSql.Repository.CarritoRepository;
import com.example.VentasSql.Repository.ProductoRepository;
import com.example.VentasSql.Repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/carrito")
@RequiredArgsConstructor
public class CarritoController {

    private final CarritoRepository carritoRepository;
    private final ProductoRepository productoRepository;
    private final UserRepository userRepository;

    @PostMapping("/agregar")
    public ResponseEntity<?> agregarProducto(@RequestBody PedidoRequest pedidoRequest, @AuthenticationPrincipal UserDetails userDetails) {
        Optional<Producto> productoOpt = productoRepository.findById(pedidoRequest.getProductoId());
        if (productoOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Producto no encontrado");
        }
        var usuarioOpt = userRepository.findByUsername(userDetails.getUsername());
        if (usuarioOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Usuario no encontrado");
        }
        CarritoItem carritoItem = new CarritoItem();
        carritoItem.setProducto(productoOpt.get());
        carritoItem.setCantidad(pedidoRequest.getCantidad());
        carritoItem.setUsuario(usuarioOpt.get());
        carritoRepository.save(carritoItem);
        return ResponseEntity.ok().build();
    }

    @GetMapping
    public ResponseEntity<?> obtenerCarrito(@AuthenticationPrincipal UserDetails userDetails) {
        var usuarioOpt = userRepository.findByUsername(userDetails.getUsername());
        if (usuarioOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Usuario no encontrado");
        }
        var carritoItems = carritoRepository.findByUsuario(usuarioOpt.get());
        return ResponseEntity.ok(carritoItems);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> eliminarProducto(@PathVariable Long id) {
        if (!carritoRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        carritoRepository.deleteById(id);
        return ResponseEntity.ok().build();
    }

    @DeleteMapping("/limpiar")
    public ResponseEntity<?> limpiarCarrito(@AuthenticationPrincipal UserDetails userDetails) {
        try {
            var usuarioOpt = userRepository.findByUsername(userDetails.getUsername());
            if (usuarioOpt.isEmpty()) {
                return ResponseEntity.badRequest().body("Usuario no encontrado");
            }
            carritoRepository.deleteByUsuario(usuarioOpt.get());
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error al limpiar carrito: " + e.getMessage());
        }
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\CategoriaController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Entidad.Categoria;
import com.example.VentasSql.Repository.CategoriaRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/categorias")
@RequiredArgsConstructor

public class CategoriaController {
    private final CategoriaRepository categoriaRepository;

    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public Categoria crear(@RequestBody Categoria categoria) {
        return categoriaRepository.save(categoria);
    }

    @GetMapping
    @PreAuthorize("permitAll()")
    public List<Categoria> listar() {
        return categoriaRepository.findAll();
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public Categoria actualizar(@PathVariable Long id, @RequestBody Categoria data) {
        Categoria c = categoriaRepository.findById(id).orElseThrow();
        c.setNombre(data.getNombre());
        return categoriaRepository.save(c);
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public void eliminar(@PathVariable Long id) {
        categoriaRepository.deleteById(id);
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\HomeController.java -----

package com.example.VentasSql.Controller;


import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HomeController {
    @GetMapping("/home")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") 
    public String home(){
        return "¡Bienvenido! Acceso autorizado con token JWT";
    }
}



----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\MarcaController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Entidad.Marca;
import com.example.VentasSql.Repository.MarcaRepository;    
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/marcas")
@RequiredArgsConstructor

public class MarcaController {
    private final MarcaRepository marcaRepository;

    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public Marca crear(@RequestBody Marca marca) {
        return marcaRepository.save(marca);
    }

    @GetMapping
    @PreAuthorize("permitAll()")
    public List<Marca> listar() {
        return marcaRepository.findAll();
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public Marca actualizar(@PathVariable Long id, @RequestBody Marca data) {
        Marca m = marcaRepository.findById(id).orElseThrow();
        m.setNombre(data.getNombre());
        return marcaRepository.save(m);
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public void eliminar(@PathVariable Long id) {
        marcaRepository.deleteById(id);
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\PedidoController.java -----


package com.example.VentasSql.Controller;

import com.example.VentasSql.Dto.PedidoDto;
import com.example.VentasSql.Dto.PedidoRequest;
import com.example.VentasSql.Entidad.DetallePedido;
import com.example.VentasSql.Entidad.Pedido;
import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Repository.PedidoRepository;
import com.example.VentasSql.Repository.ProductoRepository;
import com.example.VentasSql.Repository.UserRepository;
import com.example.VentasSql.Service.BoletaPdfService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;


import java.math.BigDecimal;
import java.math.RoundingMode;
import java.security.Principal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/pedidos")
@RequiredArgsConstructor
public class PedidoController {

    private final PedidoRepository pedidoRepository;
    private final ProductoRepository productoRepository;
    private final UserRepository userRepository;
    private final BoletaPdfService boletaPdfService;

    private static final BigDecimal IGV_RATE = new BigDecimal("0.18");

    @PostMapping("/crear")
    @PreAuthorize("permitAll()")
    @Transactional
    public ResponseEntity<?> crearPedido(@Valid @RequestBody List<PedidoRequest> pedidos, Principal principal) {
        try {
            if (pedidos == null || pedidos.isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of("error", "La lista de pedidos no puede estar vacía."));
            }

            Uuser usuario = userRepository.findByUsername(principal.getName()).orElseThrow();

            Map<Long, Integer> productosEnPedido = new HashMap<>();
            for (PedidoRequest p : pedidos) {
                productosEnPedido.merge(p.getProductoId(), p.getCantidad(), Integer::sum);
            }

            List<DetallePedido> detallesPedido = new ArrayList<>();
            BigDecimal subtotalGeneral = BigDecimal.ZERO;
            StringBuilder mensajeStockInsuficiente = new StringBuilder();

            for (Map.Entry<Long, Integer> entry : productosEnPedido.entrySet()) {
                Long productoId = entry.getKey();
                Integer cantidadSolicitada = entry.getValue();

                Producto producto = productoRepository.findById(productoId).orElse(null);
                if (producto == null) {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "Producto con ID " + productoId + " no encontrado."));
                }

                if (producto.getStock() < cantidadSolicitada) {
                    mensajeStockInsuficiente.append("No hay stock suficiente para el producto '")
                            .append(producto.getNombre())
                            .append("'. Stock disponible: ")
                            .append(producto.getStock())
                            .append(". Cantidad solicitada: ")
                            .append(cantidadSolicitada)
                            .append(".\n");
                } else {
                    BigDecimal precioUnitario = producto.getPrecio();
                    BigDecimal subtotalDetalle = precioUnitario.multiply(BigDecimal.valueOf(cantidadSolicitada));
                    subtotalGeneral = subtotalGeneral.add(subtotalDetalle);

                    DetallePedido detalle = new DetallePedido();
                    detalle.setProducto(producto);
                    detalle.setCantidad(cantidadSolicitada);
                    detalle.setPrecioUnitario(precioUnitario.doubleValue());
                    detalle.setSubtotalDetalle(subtotalDetalle.doubleValue());
                    detallesPedido.add(detalle);
                }
            }

            if (mensajeStockInsuficiente.length() > 0) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of("error", mensajeStockInsuficiente.toString()));
            }

            Pedido pedido = new Pedido();
            pedido.setFechaPedido(LocalDateTime.now());
            pedido.setUsuario(usuario);
            pedido.setDetalles(detallesPedido);
            pedido.setTotal(subtotalGeneral.setScale(2, RoundingMode.HALF_UP));
            detallesPedido.forEach(detalle -> detalle.setPedido(pedido));

            pedidoRepository.save(pedido);

            // Update stock
            for (DetallePedido detalle : detallesPedido) {
                Producto producto = detalle.getProducto();
                producto.setStock(producto.getStock() - detalle.getCantidad());
                productoRepository.save(producto);
            }

            return ResponseEntity.ok(Map.of("message", "Pedido creado con éxito", "pedidoId", pedido.getId()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of("error", "Error al crear el pedido: " + e.getMessage()));
        }
    }

    @GetMapping("/historial")
    @PreAuthorize("hasAnyRole('COMPRADOR','ADMIN', 'USER')")
    public ResponseEntity<List<PedidoDto>> obtenerHistorialPedidos(Principal principal) {
        Uuser usuario = userRepository.findByUsername(principal.getName())
                                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Usuario no encontrado"));

        List<Pedido> historialEntidades = pedidoRepository.findByUsuario(usuario);

        // Mapear entidades a DTOs
        List<PedidoDto> historialDto = historialEntidades.stream()
                                                          .map(PedidoDto::new)
                                                          .collect(Collectors.toList());

        return ResponseEntity.ok(historialDto);
    }
    // Ejemplo en PedidoController.java (o BoletaController)
// @GetMapping("/pdf/{pedidoId}")
// public ResponseEntity<byte[]> generarPdfBoleta(@PathVariable Long pedidoId) {
//     try {
//         // 1. Buscar el pedido por ID
//         Pedido pedido = pedidoRepository.findById(pedidoId)
//             .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Pedido no encontrado"));

//         // 2. Lógica para generar el PDF (esto es solo un placeholder)
//         byte[] pdfContents = boletaPdfService.generarPdfBoleta(pedido);
//         HttpHeaders headers = new HttpHeaders();
//         headers.setContentType(MediaType.APPLICATION_PDF);
//         String filename = "boleta_" + pedidoId + ".pdf";
//         headers.setContentDispositionFormData("attachment", filename); // Para que el navegador lo descargue

//         return new ResponseEntity<>(pdfContents, headers, HttpStatus.OK);

//     } catch (Exception e) {
//         // Manejo de errores
//         return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                              .body(("Error al generar el PDF: " + e.getMessage()).getBytes());
//     }
// }
// Necesitarás implementar la función generarContenidoPdf(Pedido pedido)
// que use una librería de PDF para crear el archivo.
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\ProductoController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Service.ProductoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/productos")
public class ProductoController {

    @Autowired
    private ProductoService productoService;

    // --- Endpoints CRUD Básicos (ya existentes) ---

    // GET /productos - Obtener todos los productos
    @GetMapping
    @PreAuthorize("permitAll()") // Accesible por USER y ADMIN
    public ResponseEntity<List<Producto>> getAllProductos() {
        List<Producto> productos = productoService.getAllProductos();
        return new ResponseEntity<>(productos, HttpStatus.OK);
    }

    // GET /productos/{id} - Obtener un producto por ID
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('VISITANTE','COMPRADOR','USER', 'ADMIN')") // Accesible por USER y ADMIN
    public ResponseEntity<Producto> getProductoById(@PathVariable Long id) {
        return productoService.getProductoById(id)
                .map(producto -> new ResponseEntity<>(producto, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    // POST /productos - Crear un nuevo producto
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')") // Solo ADMIN puede crear productos
    public ResponseEntity<Producto> createProducto(@RequestBody Producto producto) {
        Producto newProducto = productoService.createProducto(producto);
        return new ResponseEntity<>(newProducto, HttpStatus.CREATED);
    }

    // PUT /productos/{id} - Actualizar un producto completo
    @PutMapping("/{id}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") // Solo ADMIN puede actualizar productos completos
    public ResponseEntity<Producto> updateProducto(@PathVariable Long id, @RequestBody Producto productoDetails) {
        Producto updatedProducto = productoService.updateProducto(id, productoDetails);
        return updatedProducto != null ?
                new ResponseEntity<>(updatedProducto, HttpStatus.OK) :
                new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }

    // PUT /productos/{id}/stock - Actualizar el stock
    @PutMapping("/{id}/stock")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") // USER y ADMIN pueden actualizar stock
    public ResponseEntity<Producto> updateProductoStock(@PathVariable Long id, @RequestParam Integer nuevoStock) {
        return productoService.updateProductoStock(id, nuevoStock)
                .map(producto -> new ResponseEntity<>(producto, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    // PUT /productos/{id}/precio - Actualizar el precio
    @PutMapping("/{id}/precio")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") // USER y ADMIN pueden actualizar precio
    public ResponseEntity<Producto> updateProductoPrecio(@PathVariable Long id, @RequestParam Double nuevoPrecio) {
        return productoService.updateProductoPrecio(id, nuevoPrecio)
                .map(producto -> new ResponseEntity<>(producto, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    // DELETE /productos/{id} - Eliminar un producto
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')") // Solo ADMIN puede eliminar productos
    public ResponseEntity<Void> deleteProducto(@PathVariable Long id) {
        productoService.deleteProducto(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    // --- Nuevas Rutas ---

    /**
     * GET /productos/bajo-stock
     * Descripción: Obtiene todos los productos cuyo stock es menor a 5.
     * Permisos: Accesible para usuarios con rol 'USER' o 'ADMIN'.
     */
    @GetMapping("/bajo-stock")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") // USER y ADMIN pueden ver el bajo stock
    public ResponseEntity<List<Producto>> getProductosConBajoStock() {
        List<Producto> productos = productoService.getProductosConBajoStock();
        return new ResponseEntity<>(productos, HttpStatus.OK);
    }

    /**
     * GET /productos/buscar
     * Descripción: Busca productos cuya descripción contenga la palabra clave especificada.
     * Ejemplo: /productos/buscar?keyword=telefono
     * Permisos: Accesible para usuarios con rol 'USER' o 'ADMIN'.
     */
    @GetMapping("/buscar")
    @PreAuthorize("permitAll()") // USER y ADMIN pueden buscar productos
    public ResponseEntity<List<Producto>> searchProductosByDescription(@RequestParam String keyword) {
        List<Producto> productos = productoService.searchProductosByDescription(keyword);
        return new ResponseEntity<>(productos, HttpStatus.OK);
    }

    
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\ResenaController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Entidad.Resena;
import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Repository.ResenaRepository;
import com.example.VentasSql.Repository.UserRepository;
import lombok.RequiredArgsConstructor;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.security.Principal;
import java.util.List;

@RestController
@RequestMapping("/reseñas")
@RequiredArgsConstructor
public class ResenaController {
    private final ResenaRepository resenaRepository;
    private final UserRepository userRepository;

    @PostMapping("/crear")
    @PreAuthorize("hasRole('COMPRADOR')")
    public ResponseEntity<String> crear(@RequestBody Resena resena, Principal principal) {
        Uuser usuario = userRepository.findByUsername(principal.getName()).orElseThrow();
        resena.setUsuario(usuario);
        resena.setAprobado(false);
        resenaRepository.save(resena);
        return ResponseEntity.ok("Reseña enviada para aprobación");
    }

    @GetMapping("/producto/{id}")
    @PreAuthorize("permitAll()") // Accesible por todos
    public List<Resena> verReseñas(@PathVariable Long id) {
        return resenaRepository.findByProductoIdAndAprobadoTrue(id);
    }

    @PutMapping("/moderar/{id}")
    @PreAuthorize("hasAnyRole('USER','ADMIN')")
    public ResponseEntity<String> aprobar(@PathVariable Long id) {
        Resena resena = resenaRepository.findById(id).orElseThrow();
        resena.setAprobado(true);
        resenaRepository.save(resena);
        return ResponseEntity.ok("Reseña aprobada");
    }
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> eliminarResena(@PathVariable Long id) {
        try {
            if (!resenaRepository.existsById(id)) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Reseña con ID " + id + " no encontrada.");
            }
            resenaRepository.deleteById(id);
            return ResponseEntity.ok("Reseña eliminada correctamente.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error al eliminar la reseña: " + e.getMessage());
        }
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\UsuarioController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Dto.AuthRequest;
import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Repository.UserRepository;
import lombok.RequiredArgsConstructor;
import com.example.VentasSql.Repository.UserRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import com.example.VentasSql.Seguridad.JwtUtil;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;



import java.security.Principal;
import java.util.List;

@RestController
@RequestMapping("/usuario")
@RequiredArgsConstructor
public class UsuarioController {
    private final PasswordEncoder passwordEncoder;
    private final UserRepository userRepository;
    private final JwtUtil jwtUtil;

    

    @GetMapping("/perfil")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<Uuser> getPerfil(Principal principal) {
        return userRepository.findByUsername(principal.getName())
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PutMapping("/perfil")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<String> updatePerfil(@RequestBody Uuser datos, Principal principal) {
        Uuser user = userRepository.findByUsername(principal.getName())
                .orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

        user.setNombre(datos.getNombre());
        user.setDireccion(datos.getDireccion());
        user.setTelefono(datos.getTelefono());
        userRepository.save(user);

        return ResponseEntity.ok("Perfil actualizado correctamente");
    }
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Uuser> crearUsuario(@RequestBody Uuser usuario) {
        Uuser nuevoUsuario = userRepository.save(usuario);
        return ResponseEntity.status(HttpStatus.CREATED).body(nuevoUsuario);
    }
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> eliminarUsuario(@PathVariable Long id) {
        try {
            if (!userRepository.existsById(id)) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuario con ID " + id + " no encontrado.");
            }
            userRepository.deleteById(id);
            return ResponseEntity.ok("Usuario eliminado correctamente.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error al eliminar el usuario: " + e.getMessage());
        }
    }

    @GetMapping("/listar")
    @PreAuthorize("hasRole('ADMIN')")
    public List<Uuser> listarUsuarios() {
        return userRepository.findAll();
    }
    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Uuser> actualizarUsuario(@PathVariable Long id, @RequestBody Uuser usuario) {
        // Verificar si el usuario existe
        if (!userRepository.existsById(id)) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null); // 404 Not Found
        }
        // Actualizar el usuario
        usuario.setId(id); // Asegúrate de que el ID se establezca
        Uuser usuarioActualizado = userRepository.save(usuario);
        return ResponseEntity.ok(usuarioActualizado);
    }
    


}




----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\AuthRequest.java -----

package com.example.VentasSql.Dto;

import lombok.Data;

@Data

public class AuthRequest {
    private String username;
    private String password;

}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\AuthResponse.java -----

package com.example.VentasSql.Dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor

public class AuthResponse {
    private String token;

}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\DetallePedidoDto.java -----

package com.example.VentasSql.Dto;

import com.example.VentasSql.Entidad.DetallePedido;
import lombok.Data;

@Data
public class DetallePedidoDto {
    private Long id;
    private String producto;
    private Integer cantidad;
    private Double precioUnitario;
    private Double subtotalDetalle;

    // Aquí está la clave: este DTO de detalle NO tiene una referencia al Pedido padre.
    // Si la tuviera, tendríamos otro bucle.
    // private PedidoDto pedido; // ¡NO INCLUIR ESTO AQUÍ!

    public DetallePedidoDto(DetallePedido detalle) {
        this.id = detalle.getId();
        this.producto = detalle.getProducto() != null ? detalle.getProducto().getNombre() : "Producto Desconocido";
        this.cantidad = detalle.getCantidad();
        this.precioUnitario = detalle.getPrecioUnitario();
        this.subtotalDetalle = detalle.getSubtotalDetalle();
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\PedidoDto.java -----

package com.example.VentasSql.Dto;

import com.example.VentasSql.Entidad.Pedido;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;
import lombok.Data;

@Data
public class PedidoDto {
    private Long id;
    private LocalDateTime fechaEmision;
    private BigDecimal subtotal;
    private BigDecimal igv;
    private BigDecimal total;
    private String numeroBoleta;
    private String nombreUsuario;
    private List<DetallePedidoDto> detalles; // <-- Esto es una lista de DTOs de detalles, NO entidades

    public PedidoDto(Pedido pedido) {
        this.id = pedido.getId();
        this.fechaEmision = pedido.getFechaPedido();
        this.total = pedido.getTotal();

        BigDecimal igvRate = new BigDecimal("0.18");
        this.igv = pedido.getTotal().multiply(igvRate).divide(BigDecimal.ONE.add(igvRate), 2, java.math.RoundingMode.HALF_UP);
        this.subtotal = pedido.getTotal().subtract(this.igv);

        this.numeroBoleta = String.format("BOLETA-%06d", pedido.getId());

        this.nombreUsuario = pedido.getUsuario() != null ? pedido.getUsuario().getUsername() : "N/A";

        // Aquí es crucial: mapeamos las entidades DetallePedido a DetallePedidoDto
        // NO intentamos serializar la entidad Pedido dentro de DetallePedidoDto
        this.detalles = pedido.getDetalles() != null ?
                        pedido.getDetalles().stream()
                              .map(DetallePedidoDto::new) // <-- Llama al constructor del DTO de detalle
                              .collect(Collectors.toList()) :
                        List.of();
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\PedidoRequest.java -----

package com.example.VentasSql.Dto;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.Data;

@Data
public class PedidoRequest {

    @NotNull(message = "El ID del producto es obligatorio")
    private Long productoId;

    @NotNull(message = "La cantidad es obligatoria")
    @Positive(message = "La cantidad debe ser mayor a cero")
    private Integer cantidad;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\RegisterRequest.java -----

package com.example.VentasSql.Dto;

import lombok.Data;
import com.example.VentasSql.Entidad.Role; 

@Data
public class RegisterRequest {
    private String username;
    private String password;
    private String nombre;
    private Role role; 
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Boleta.java -----

package com.example.VentasSql.Entidad;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Boleta {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String numeroBoleta;
    private LocalDateTime fechaEmision;
    private BigDecimal subtotal;
    private BigDecimal igv;
    private BigDecimal total;

    @ManyToOne(fetch = FetchType.LAZY) // Relación con el usuario (comprador)
    @JoinColumn(name = "user_id") // Columna en la tabla boleta que referencia al usuario
    private Uuser usuario; // Asegúrate de tener este campo

    @OneToMany(mappedBy = "boleta", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    @JsonManagedReference // Evita recursión infinita en JSON
    private List<DetalleBoleta> detalles;

    // Getters y Setters (si no usas Lombok @Data)
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\CarritoItem.java -----

package com.example.VentasSql.Entidad;
import com.example.VentasSql.Entidad.Producto;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import lombok.Data;

@Entity
@Data
public class CarritoItem {
    @Id @GeneratedValue
    private Long id;

    @ManyToOne
    private Uuser usuario;

    @ManyToOne
    private Producto producto;

    private Integer cantidad;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Categoria.java -----

package com.example.VentasSql.Entidad;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import lombok.Data;

@Entity
@Data
public class Categoria {
    @Id @GeneratedValue
    private Long id;
    private String nombre;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\DetalleBoleta.java -----

package com.example.VentasSql.Entidad;

import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.math.BigDecimal;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class DetalleBoleta {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "boleta_id")
    @JsonBackReference // Evita recursión infinita en JSON
    private Boleta boleta;

    @ManyToOne(fetch = FetchType.EAGER) // Producto podría ser EAGER si siempre lo necesitas cargado
    @JoinColumn(name = "producto_id")
    private Producto producto; // Asegúrate de que este tenga un getter para `nombre`

    private Integer cantidad;
    private BigDecimal precioUnitario;
    private BigDecimal subtotalDetalle;

    // Getters y Setters (si no usas Lombok @Data)
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\DetallePedido.java -----

package com.example.VentasSql.Entidad;

import com.example.VentasSql.Entidad.Producto;
import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "detalle_pedido")
@Data
@NoArgsConstructor
public class DetallePedido {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "pedido_id")
    private Pedido pedido;

    @ManyToOne
    @JoinColumn(name = "producto_id")
    private Producto producto;

    private Integer cantidad;

    private Double precioUnitario;

    private Double subtotalDetalle;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Marca.java -----

package com.example.VentasSql.Entidad;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Data;

@Entity
@Data
public class Marca {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nombre;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Pedido.java -----

package com.example.VentasSql.Entidad;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Data 
@NoArgsConstructor
@AllArgsConstructor
public class Pedido {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToMany(mappedBy = "pedido", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<DetallePedido> detalles;

    @ManyToOne
    private Uuser usuario;

    private LocalDateTime fechaPedido;

    private BigDecimal total;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Producto.java -----

package com.example.VentasSql.Entidad;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.math.BigDecimal;

import com.example.VentasSql.Entidad.Categoria;
import com.example.VentasSql.Entidad.Marca;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Producto {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)    
    private Long id;

    private String nombre;
    private Integer stock;
    private String descripcion;
    private BigDecimal precio;

    @ManyToOne
    private Marca marca;

    @ManyToOne
    private Categoria categoria;

    
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Resena.java -----

package com.example.VentasSql.Entidad;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Entidad.Uuser; 

@Entity
@Data

public class Resena {
    @Id @GeneratedValue
    private Long id;

    @ManyToOne
    private Uuser usuario;

    @ManyToOne
    private Producto producto;

    private String comentario;
    private Integer puntuacion; // 1-5
    private boolean aprobado = false;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Role.java -----

package com.example.VentasSql.Entidad;

public enum Role {
    VISITANTE,
    COMPRADOR,
    USER,
    ADMIN
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Uuser.java -----

package com.example.VentasSql.Entidad;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import com.example.VentasSql.Entidad.Role; 

@Data
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Uuser {
    @Id @GeneratedValue
    private Long id;
    private String username;
    private String password;

    private String nombre;
    private String direccion;
    private String telefono;


    @Enumerated(EnumType.STRING) 
    private Role role; 
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\BoletaRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Boleta;
import com.example.VentasSql.Entidad.Uuser;
import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;


public interface BoletaRepository extends JpaRepository<Boleta, Long> {
    Boleta findTopByOrderByFechaEmisionDesc(); 
    List<Boleta> findByUsuario(Uuser usuario);

}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\CarritoRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.CarritoItem;
import com.example.VentasSql.Entidad.Uuser;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

public interface CarritoRepository extends JpaRepository<CarritoItem, Long> {
    List<CarritoItem> findByUsuario(Uuser usuario);
    @Transactional
    void deleteByUsuario(Uuser usuario);
     // Asegura que la operación de eliminación se ejecute dentro de una transacción
    
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\CategoriaRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Categoria;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CategoriaRepository extends JpaRepository<Categoria, Long> {}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\DetalleBoletaRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.DetalleBoleta;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DetalleBoletaRepository extends JpaRepository<DetalleBoleta, Long> {
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\MarcaRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Marca;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MarcaRepository extends JpaRepository<Marca, Long> {}



----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\PedidoRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Pedido;
import com.example.VentasSql.Entidad.Uuser;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface PedidoRepository extends JpaRepository<Pedido, Long> {
    List<Pedido> findByUsuario(Uuser usuario);
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\ProductoRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Producto;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ProductoRepository extends JpaRepository<Producto, Long> {

    // Consulta ya existente para productos con bajo stock
    @Query("SELECT p FROM Producto p WHERE p.stock < 5")
    List<Producto> findProductosConBajoStock();

    // Nueva consulta para buscar productos cuya descripción contenga una palabra clave (ignorando mayúsculas/minúsculas)
    // Spring Data JPA puede derivar esta consulta automáticamente por el nombre del método
    List<Producto> findByDescripcionContainingIgnoreCase(String keyword);

    // Opcional: Si prefieres JPQL explícito para la búsqueda por descripción
    /*
    @Query("SELECT p FROM Producto p WHERE LOWER(p.descripcion) LIKE LOWER(CONCAT('%', :keyword, '%'))")
    List<Producto> buscarPorDescripcion(@Param("keyword") String keyword);
    */
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\ResenaRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Resena;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;


public interface ResenaRepository extends JpaRepository<Resena, Long> {
    List<Resena> findByProductoIdAndAprobadoTrue(Long productoId);
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\UserRepository.java -----

package com.example.VentasSql.Repository;
import java.util.List;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.VentasSql.Entidad.Uuser;


public interface UserRepository extends JpaRepository<Uuser, Long>{
    Optional <Uuser> findByUsername (String username);
    List<Uuser> findAll();
    Uuser save(Uuser user);


}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Seguridad\JwtFilter.java -----

package com.example.VentasSql.Seguridad;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.Collections;
import org.springframework.security.core.authority.SimpleGrantedAuthority;


@Component
@RequiredArgsConstructor
public class JwtFilter implements Filter {
    private final JwtUtil jwtUtil;
    private final UserDetailsServiceImpl userDetailsService;

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)
            throws IOException, ServletException {

        HttpServletRequest req = (HttpServletRequest) request;
        String auth = req.getHeader("Authorization");

        System.out.println("Header Authorization: " + auth);

        String username = null;
        String token = null;
        String role = null;

        if (auth != null && auth.startsWith("Bearer ")) {
            token = auth.substring(7);
            try {
                username = jwtUtil.extractUsername(token);
                role = jwtUtil.extractRole(token); // Extraemos el rol
            } catch (Exception e) {
                System.out.println("Error al extraer username o rol del token: " + e.getMessage());
            }
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);

            if (jwtUtil.validateToken(token)) {
                System.out.println("Token válido para usuario: " + username + " con rol: " + role);

                
                SimpleGrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + role);
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                        userDetails, null, Collections.singletonList(authority)); 
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(req));
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }
        filterChain.doFilter(request, response);
    }
}



----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Seguridad\JwtUtil.java -----

package com.example.VentasSql.Seguridad;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;


@Component
public class JwtUtil {
    @Value("${jwt.secret}")
    private String secret;

    @Value("${jwt.expiration}")
    private long expiration;

    private Key secretKey;

    @PostConstruct
    public void init(){
        this.secretKey = Keys.hmacShaKeyFor(secret.getBytes());
    }

    
    public String generateToken(String username, String role){
        Map<String, Object> claims = new HashMap<>();
        claims.put("role", role); 
        return Jwts.builder()
                .setClaims(claims) 
                .setSubject(username)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(secretKey, SignatureAlgorithm.HS512)
                .compact();
    }

    public String extractUsername(String token){
        return extractClaim(token, Claims::getSubject);
    }

    public String extractRole(String token){
        return extractClaim(token, claims -> claims.get("role", String.class));
    }

    public Date extractExpiration(String token){
        return extractClaim(token, Claims::getExpiration);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver){
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token){
        return Jwts.parserBuilder()
                .setSigningKey(secretKey)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    private Boolean isTokenExpired(String token){
        return extractExpiration(token).before(new Date());
    }

    public boolean validateToken(String token){
        try{
            Jwts.parserBuilder()
                    .setSigningKey(secretKey)
                    .build()
                    .parseClaimsJws(token);
            return !isTokenExpired(token); 
        } catch (Exception e){
            System.out.println("Error al validar el token: " + e.getMessage());
            return false;
        }
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Seguridad\SecurityConfig.java -----

package com.example.VentasSql.Seguridad;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity; 
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;

import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import java.util.Arrays;

@Configuration
@RequiredArgsConstructor
@EnableMethodSecurity(prePostEnabled = true) 
public class SecurityConfig {

    private final JwtFilter jwtFilter;
    private final UserDetailsService userDetailsService;

    @Bean
    public DaoAuthenticationProvider authenticationProvider(){
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    @Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    return http
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .csrf(csrf->csrf.disable())
            .authorizeHttpRequests(auth->auth
                    .requestMatchers(
                            "/registro", "/auth/login", "/login",
                            "/registro-comprador",
                            "/productos", "/productos/**",
                            "/marcas", "/marcas/**", // Añadir estas líneas
                            "/categorias", "/categorias/**",
                            "/carrito/**","/reseñas/producto/**").permitAll()                        
                    .anyRequest().authenticated()
            )
            .sessionManagement(sess->sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)
            .build();
}

@Bean
public CorsConfigurationSource corsConfigurationSource() {
    CorsConfiguration configuration = new CorsConfiguration();
    configuration.setAllowedOrigins(Arrays.asList("http://localhost:4200"));
    configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
    configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));
    configuration.setExposedHeaders(Arrays.asList("Authorization"));
    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration("/**", configuration);
    return source;
}

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Seguridad\UserDetailsServiceImpl.java -----

package com.example.VentasSql.Seguridad;

import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class UserDetailsServiceImpl implements UserDetailsService {

    private final UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        Uuser user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("Usuario no encontrado: " + username));

        
        List<GrantedAuthority> authorities = Collections.singletonList(new SimpleGrantedAuthority("ROLE_" + user.getRole().name()));

        return new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(),
                authorities 
        );
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Service\BoletaPdfService.java -----

package com.example.VentasSql.Service; // O el paquete que elijas

import com.example.VentasSql.Entidad.Boleta;
import com.example.VentasSql.Entidad.DetalleBoleta;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;

@Service
public class BoletaPdfService {

    public byte[] generarPdfBoleta(Boleta boleta) throws DocumentException {
        // Validación básica
        if (boleta == null) {
            throw new IllegalArgumentException("La boleta no puede ser nula para generar el PDF.");
        }

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document();

        try {
            PdfWriter.getInstance(document, baos);
            document.open();

            // Título
            document.add(new Paragraph("BOLETA DE VENTA"));
            document.add(new Paragraph("------------------------------------------------------------------"));
            document.add(new Paragraph("Número de Boleta: " + boleta.getNumeroBoleta()));
            document.add(new Paragraph("Fecha de Emisión: " + boleta.getFechaEmision().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))));
            
            // Asumiendo que Boleta puede tener un usuario asociado
            if (boleta.getUsuario() != null && boleta.getUsuario().getUsername() != null) {
                 document.add(new Paragraph("Cliente: " + boleta.getUsuario().getUsername()));
            } else {
                 document.add(new Paragraph("Cliente: (No especificado)"));
            }

            document.add(new Paragraph("------------------------------------------------------------------"));
            document.add(new Paragraph("Detalle de Productos:"));
            document.add(new Paragraph(" ")); // Espacio

            // Tabla de productos
            PdfPTable table = new PdfPTable(4); // 4 columnas: Producto, Cantidad, Precio Unitario, Subtotal
            table.setWidthPercentage(100);
            table.setSpacingBefore(10f);
            table.setSpacingAfter(10f);

            // Encabezados de la tabla
            table.addCell(new PdfPCell(new Phrase("Producto")));
            table.addCell(new PdfPCell(new Phrase("Cantidad")));
            table.addCell(new PdfPCell(new Phrase("P. Unitario")));
            table.addCell(new PdfPCell(new Phrase("Subtotal")));

            // Filas de la tabla
            for (DetalleBoleta detalle : boleta.getDetalles()) {
                table.addCell(new PdfPCell(new Phrase(detalle.getProducto().getNombre())));
                table.addCell(new PdfPCell(new Phrase(String.valueOf(detalle.getCantidad()))));
                table.addCell(new PdfPCell(new Phrase("S/ " + detalle.getPrecioUnitario().setScale(2, BigDecimal.ROUND_HALF_UP))));
                table.addCell(new PdfPCell(new Phrase("S/ " + detalle.getSubtotalDetalle().setScale(2, BigDecimal.ROUND_HALF_UP))));
            }
            document.add(table);

            // Totales
            document.add(new Paragraph(" ")); // Espacio
            document.add(new Paragraph("Subtotal: S/ " + boleta.getSubtotal().setScale(2, BigDecimal.ROUND_HALF_UP)));
            document.add(new Paragraph("IGV (18%): S/ " + boleta.getIgv().setScale(2, BigDecimal.ROUND_HALF_UP)));
            document.add(new Paragraph("Total a Pagar: S/ " + boleta.getTotal().setScale(2, BigDecimal.ROUND_HALF_UP)));
            document.add(new Paragraph("------------------------------------------------------------------"));
            document.add(new Paragraph("Gracias por su compra!"));

        } finally {
            document.close();
        }

        return baos.toByteArray();
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Service\ProductoService.java -----

package com.example.VentasSql.Service;

import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Repository.ProductoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.VentasSql.Repository.MarcaRepository;
import com.example.VentasSql.Repository.CategoriaRepository;



import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import jakarta.persistence.Entity;


@Service
public class ProductoService {

    @Autowired
    private ProductoRepository productoRepository;

    // Método para obtener todos los productos
    public List<Producto> getAllProductos() {
        return productoRepository.findAll();
    }

    // Método para obtener un producto por ID
    public Optional<Producto> getProductoById(Long id) {
        return productoRepository.findById(id);
    }
    @Autowired
    private MarcaRepository marcaRepository;
    @Autowired
    private CategoriaRepository categoriaRepository;
    

    // Método para crear un producto
    @Transactional
    public Producto createProducto(Producto producto) {
            // Asegurar que Marca y Categoria se carguen por ID si vienen solo con ID
            if (producto.getMarca() != null && producto.getMarca().getId() != null) {
                marcaRepository.findById(producto.getMarca().getId())
                    .ifPresent(producto::setMarca);
            }
            if (producto.getCategoria() != null && producto.getCategoria().getId() != null) {
                categoriaRepository.findById(producto.getCategoria().getId())
                    .ifPresent(producto::setCategoria);
            }
            return productoRepository.save(producto);
        }

    // Método para actualizar un producto (ejemplo de @Transactional si actualiza entidades relacionadas)
    // Para una simple actualización, @Transactional es opcional pero buena práctica
    @Transactional
        public Producto updateProducto(Long id, Producto productoDetails) {
            return productoRepository.findById(id).map(producto -> {
                producto.setNombre(productoDetails.getNombre());
                producto.setStock(productoDetails.getStock());
                producto.setDescripcion(productoDetails.getDescripcion());
                producto.setPrecio(productoDetails.getPrecio());
                // Actualizar Marca y Categoria si se proporcionan
                if (productoDetails.getMarca() != null && productoDetails.getMarca().getId() != null) {
                    marcaRepository.findById(productoDetails.getMarca().getId())
                        .ifPresent(producto::setMarca);
                } else if (productoDetails.getMarca() == null) { // Si se envía null, desasociar
                    producto.setMarca(null);
                }
                if (productoDetails.getCategoria() != null && productoDetails.getCategoria().getId() != null) {
                    categoriaRepository.findById(productoDetails.getCategoria().getId())
                        .ifPresent(producto::setCategoria);
                } else if (productoDetails.getCategoria() == null) { // Si se envía null, desasociar
                    producto.setCategoria(null);
                }
                return productoRepository.save(producto);
            }).orElse(null);
        }

    // Método para actualizar el stock de un producto
    @Transactional
    public Optional<Producto> updateProductoStock(Long id, Integer nuevoStock) {
        return productoRepository.findById(id).map(producto -> {
            producto.setStock(nuevoStock);
            return productoRepository.save(producto);
        });
    }

    // Método para actualizar el precio de un producto
    @Transactional
    public Optional<Producto> updateProductoPrecio(Long id, Double nuevoPrecio) {
        return productoRepository.findById(id).map(producto -> {
            producto.setPrecio(BigDecimal.valueOf(nuevoPrecio));
            return productoRepository.save(producto);
        });
    }

    // Método para eliminar un producto
    @Transactional
    public void deleteProducto(Long id) {
        productoRepository.deleteById(id);
    }

    // --- Nuevos Métodos para las Consultas Personalizadas ---

    // Método para obtener productos con menos de 5 de stock
    public List<Producto> getProductosConBajoStock() {
        return productoRepository.findProductosConBajoStock();
    }

    // Método para buscar productos por palabra clave en la descripción
    public List<Producto> searchProductosByDescription(String keyword) {
        return productoRepository.findByDescripcionContainingIgnoreCase(keyword);
        // Si usaste el método @Query con @Param, sería:
        // return productoRepository.buscarPorDescripcion(keyword);
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\VentasSqlApplication.java -----

package com.example.VentasSql;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class VentasSqlApplication {

	public static void main(String[] args) {
		SpringApplication.run(VentasSqlApplication.class, args);
	}

}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\test\java\com\example\VentasSql\VentasSqlApplicationTests.java -----

package com.example.VentasSql;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class VentasSqlApplicationTests {

	@Test
	void contextLoads() {
	}

}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\ApiController.java -----

package com.example.VentasSql.Controller;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class ApiController {
    @GetMapping("/api/seguro")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") 
    public String contenidoProtegido(){
        return "Este es un contenido protegido con JWT. ¡Acceso autorizado!";
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\AuthController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Dto.AuthRequest;
import com.example.VentasSql.Dto.AuthResponse;
import com.example.VentasSql.Dto.RegisterRequest; // Importamos el nuevo DTO
import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Repository.UserRepository;
import com.example.VentasSql.Seguridad.JwtUtil;
import com.example.VentasSql.Entidad.Role;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize; // Importar
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

@RestController
@RequiredArgsConstructor
public class AuthController {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    private final JwtUtil jwtUtil;

    @PostMapping("/registro")
    public String registrar(@RequestBody AuthRequest auth){
        if (userRepository.findByUsername(auth.getUsername()).isPresent()) {
            return "El nombre de usuario ya existe.";
        }
        Uuser u = Uuser.builder()
                .username(auth.getUsername())
                .password(passwordEncoder.encode(auth.getPassword()))
                .role(Role.USER) // Asignamos el rol USER por defecto
                .build();
        userRepository.save(u);
        return "Usuario registrado correctamente con rol USER.";
    }

    
    @PostMapping("/admin/registro-usuario")
    @PreAuthorize("hasRole('ADMIN')") 
    public ResponseEntity<String> registrarUsuarioConRol(@RequestBody RegisterRequest request){
        if (userRepository.findByUsername(request.getUsername()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("El nombre de usuario ya existe.");
        }
        Uuser u = Uuser.builder()
                .username(request.getUsername())
                .password(passwordEncoder.encode(request.getPassword()))
                .nombre(request.getNombre()) // Asignamos el nombre
                .role(request.getRole()) 
                .build();
        userRepository.save(u);
        String token = jwtUtil.generateToken(u.getUsername(), u.getRole().name());
        return ResponseEntity.ok("Usuario registrado correctamente con rol " + request.getRole().name() + ".");
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/admin/asignar-rol")
    public ResponseEntity<String> asignarRol(@RequestParam String username, @RequestParam Role nuevoRol) {
        Uuser user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

        user.setRole(nuevoRol);
        userRepository.save(user);
        return ResponseEntity.ok("Rol actualizado a " + nuevoRol.name());
    }

    @PostMapping("/registro-comprador")
    public ResponseEntity<String> registrarComprador(@RequestBody AuthRequest auth) {
        if (userRepository.findByUsername(auth.getUsername()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("El nombre de usuario ya existe.");
        }

        Uuser comprador = Uuser.builder()
                .username(auth.getUsername())
                .password(passwordEncoder.encode(auth.getPassword()))
                .role(Role.COMPRADOR)
                .build();

        userRepository.save(comprador);
        return ResponseEntity.ok("Comprador registrado correctamente.");
    }


    @PostMapping("/auth/login")
    public AuthResponse login(@RequestBody AuthRequest request){
        try {
            System.out.println("Intentando autenticar: " + request.getUsername());
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPassword()));
            System.out.println("Autenticación exitosa para: " + request.getUsername());
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Error de autenticación: " + e.getMessage());
        }

        Uuser user = userRepository.findByUsername(request.getUsername())
                .orElseThrow(() -> new RuntimeException("Usuario no encontrado después de autenticación."));

        String token = jwtUtil.generateToken(request.getUsername(), user.getRole().name());
        return new AuthResponse(token);
    }
    @PutMapping("/admin/editar-usuario/{id}")
@PreAuthorize("hasRole('ADMIN')")
public ResponseEntity<String> editarUsuario(@PathVariable Long id, @RequestBody RegisterRequest request) {
    Uuser usuario = userRepository.findById(id)
            .orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

    // Actualizar los campos del usuario
    usuario.setUsername(request.getUsername());
    if (request.getPassword() != null && !request.getPassword().isEmpty()) {
        usuario.setPassword(passwordEncoder.encode(request.getPassword())); // Codificar la nueva contraseña
    }
    usuario.setNombre(request.getNombre());
    usuario.setRole(request.getRole());

    userRepository.save(usuario);
    return ResponseEntity.ok("Usuario actualizado correctamente.");
}


    @GetMapping("/token-visitante")
    public AuthResponse generarTokenVisitante() {
        String token = jwtUtil.generateToken("anonimo", Role.VISITANTE.name());
        return new AuthResponse(token);
    }



}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\BoletaController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Dto.PedidoRequest;
import com.example.VentasSql.Entidad.Boleta;
import com.example.VentasSql.Entidad.DetalleBoleta;
import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Repository.BoletaRepository;
import com.example.VentasSql.Repository.DetalleBoletaRepository;
import com.example.VentasSql.Repository.ProductoRepository;
import com.example.VentasSql.Repository.UserRepository;
import java.security.Principal;
import com.example.VentasSql.Service.BoletaPdfService; // Importa tu nuevo servicio de PDF
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType; // Importa MediaType
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.CrossOrigin; // Importa CrossOrigin

import java.io.ByteArrayInputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.security.Principal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/boletas")
@RequiredArgsConstructor
@CrossOrigin(origins = "http://localhost:4200") // ¡IMPORTANTE! Asegúrate de que esta anotación esté aquí
public class BoletaController {

    private final BoletaRepository boletaRepository;
    private final ProductoRepository productoRepository;
    private final DetalleBoletaRepository detalleBoletaRepository;
    private final UserRepository userRepository;
    private final BoletaPdfService boletaPdfService; // Inyecta el servicio de PDF

    private static final BigDecimal IGV_RATE = new BigDecimal("0.18");

    @PostMapping("/generar")
    @PreAuthorize("permitAll()") // Accesible por USER y ADMIN
    @Transactional
    
    public ResponseEntity<?> generarBoleta(@Valid @RequestBody List<PedidoRequest> pedidos, Principal principal) {
        try {
            if (pedidos == null || pedidos.isEmpty()) {
                return ResponseEntity.badRequest().body("La lista de pedidos no puede estar vacía.");
            }

            Map<Long, Integer> productosEnPedido = new HashMap<>();
            for (PedidoRequest p : pedidos) {
                productosEnPedido.merge(p.getProductoId(), p.getCantidad(), Integer::sum);
            }

            List<DetalleBoleta> detallesBoleta = new ArrayList<>();
            BigDecimal subtotalGeneral = BigDecimal.ZERO;
            StringBuilder mensajeStockInsuficiente = new StringBuilder();

            // Primera pasada: Verificar stock y calcular subtotal por producto
            for (Map.Entry<Long, Integer> entry : productosEnPedido.entrySet()) {
                Long productoId = entry.getKey();
                Integer cantidadSolicitada = entry.getValue();

                Producto producto = productoRepository.findById(productoId)
                        .orElse(null);

                if (producto == null) {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Producto con ID " + productoId + " no encontrado.");
                }

                if (producto.getStock() < cantidadSolicitada) {
                    mensajeStockInsuficiente.append("No hay stock suficiente para el producto '")
                            .append(producto.getNombre())
                            .append("'. Stock disponible: ")
                            .append(producto.getStock())
                            .append(". Cantidad solicitada: ")
                            .append(cantidadSolicitada)
                            .append(".\n");
                } else {
                    BigDecimal precioUnitario = producto.getPrecio();
                    BigDecimal subtotalDetalle = precioUnitario.multiply(BigDecimal.valueOf(cantidadSolicitada));
                    subtotalGeneral = subtotalGeneral.add(subtotalDetalle);

                    DetalleBoleta detalle = new DetalleBoleta();
                    detalle.setProducto(producto);
                    detalle.setCantidad(cantidadSolicitada);
                    detalle.setPrecioUnitario(precioUnitario);
                    detalle.setSubtotalDetalle(subtotalDetalle);
                    detallesBoleta.add(detalle);
                }
            }

            if (mensajeStockInsuficiente.length() > 0) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(mensajeStockInsuficiente.toString());
            }

            String numeroBoleta = generarSiguienteNumeroBoleta();

            BigDecimal igvCalculado = subtotalGeneral.multiply(IGV_RATE).setScale(2, RoundingMode.HALF_UP);
            BigDecimal totalGeneral = subtotalGeneral.add(igvCalculado).setScale(2, RoundingMode.HALF_UP);

            Boleta boleta = new Boleta();
            boleta.setNumeroBoleta(numeroBoleta);
            boleta.setFechaEmision(LocalDateTime.now());
            boleta.setSubtotal(subtotalGeneral.setScale(2, RoundingMode.HALF_UP));
            boleta.setIgv(igvCalculado);
            boleta.setTotal(totalGeneral);
            boleta.setDetalles(detallesBoleta);

            // >>> ASIGNAR EL USUARIO A LA BOLETA <<<
            // Necesitas el usuario logueado para asignar la boleta al comprador
            // Si el usuario siempre está autenticado al generar una boleta, puedes usar Principal.
            // Si no, debes pasar el ID de usuario en el PedidoRequest o de alguna otra forma.
            // Ejemplo usando Principal:
            if (principal != null) {
                Uuser usuario = userRepository.findByUsername(principal.getName())
                                              .orElseThrow(() -> new RuntimeException("Usuario autenticado no encontrado."));
                boleta.setUsuario(usuario);
            } else {
                // Manejo de caso donde no hay Principal (ej. para pruebas o si permites compras como invitado)
                // Podrías asignar un usuario por defecto o requerir que el usuario esté logueado
                System.err.println("Advertencia: Boleta generada sin usuario autenticado.");
            }
            // <<< FIN ASIGNAR USUARIO >>>

            boletaRepository.save(boleta);

            for (DetalleBoleta detalle : detallesBoleta) {
                detalle.setBoleta(boleta);
                detalleBoletaRepository.save(detalle);

                // Actualizar stock del producto
                Producto producto = detalle.getProducto();
                producto.setStock(producto.getStock() - detalle.getCantidad());
                productoRepository.save(producto);
            }

            // Aquí se devuelve un mensaje de confirmación, no el PDF
            StringBuilder mensajeBoleta = new StringBuilder();
            mensajeBoleta.append("Boleta generada con éxito. Número de Boleta: ").append(boleta.getNumeroBoleta());
            return ResponseEntity.ok(java.util.Map.of("message", mensajeBoleta.toString(), "boletaId", boleta.getId()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(java.util.Map.of("error", "Error al generar la boleta: " + e.getMessage()));
        }
    }

    private String generarSiguienteNumeroBoleta() {
        Boleta ultimaBoleta = boletaRepository.findTopByOrderByFechaEmisionDesc();
        String ultimoNumeroStr = null;
        if (ultimaBoleta != null && ultimaBoleta.getNumeroBoleta() != null) {
            ultimoNumeroStr = ultimaBoleta.getNumeroBoleta().replaceAll("[^\\d]", ""); // Extraer solo dígitos
        }
        int ultimoNumero = 0;
        if (ultimoNumeroStr != null && !ultimoNumeroStr.isEmpty()) {
            try {
                ultimoNumero = Integer.parseInt(ultimoNumeroStr);
            } catch (NumberFormatException e) {
                System.err.println("Error al parsear el número de boleta: " + ultimaBoleta.getNumeroBoleta());
            }
        }
        // Asumiendo que el formato es "BOLETA-XXXX"
        return String.format("BOLETA-%05d", ultimoNumero + 1); // Formato de 5 dígitos
    }

    @GetMapping("/historial")
    @PreAuthorize("hasAnyRole('COMPRADOR', 'ADMIN','USER')")
    @Transactional
    public ResponseEntity<?> obtenerHistorialBoletas(Principal principal) {
        Uuser usuario = userRepository.findByUsername(principal.getName()).orElseThrow();
        List<Boleta> historial = boletaRepository.findByUsuario(usuario);
        return ResponseEntity.ok(historial);
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    @Transactional
    public ResponseEntity<String> eliminarBoleta(@PathVariable Long id) {
        try {
            Boleta boleta = boletaRepository.findById(id)
                    .orElseThrow(() -> new RuntimeException("Boleta con ID " + id + " no encontrada."));
            // Opcional: Revertir stock de productos antes de eliminar la boleta
            for (DetalleBoleta detalle : boleta.getDetalles()) {
                Producto producto = detalle.getProducto();
                producto.setStock(producto.getStock() + detalle.getCantidad());
                productoRepository.save(producto);
            }
            boletaRepository.delete(boleta);
            return ResponseEntity.ok("Boleta eliminada correctamente. El stock de los productos ha sido revertido.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error al eliminar la boleta: " + e.getMessage());
        }
    }

    // >>> NUEVO ENDPOINT PARA DESCARGAR PDF <<<
    @GetMapping("/{id}/pdf") // Este es el endpoint que tu frontend de Angular está llamando
    @PreAuthorize("hasAnyRole('COMPRADOR', 'ADMIN')") // Permite acceso a compradores y administradores
    @Transactional
    public ResponseEntity<InputStreamResource> descargarBoletaPdf(@PathVariable Long id) {
        try {
            // 1. Buscar la boleta por ID
            Boleta boleta = boletaRepository.findById(id)
                    .orElseThrow(() -> new RuntimeException("Boleta con ID " + id + " no encontrada."));

            // 2. Generar el PDF usando el servicio
            byte[] pdfBytes = boletaPdfService.generarPdfBoleta(boleta);

            // 3. Preparar la respuesta HTTP para el PDF
            ByteArrayInputStream bis = new ByteArrayInputStream(pdfBytes);

            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=boleta_" + boleta.getNumeroBoleta() + ".pdf");

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentType(MediaType.APPLICATION_PDF)
                    .body(new InputStreamResource(bis));

        } catch (RuntimeException e) { // Captura si la boleta no se encuentra
            System.err.println("Error al descargar PDF: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build(); // Devuelve 404
        } catch (Exception e) { // Captura otros errores (ej. al generar el PDF)
            e.printStackTrace(); // Imprime la traza completa del error en la consola del servidor
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null); // Devuelve 500
        }
    }
    /**
     * Nuevo endpoint para que los ADMIN obtengan todas las boletas.
     * Incluye los detalles de los productos y la información del usuario.
     */
 @GetMapping("/admin/todas")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<List<Boleta>> getAllBoletasForAdmin() {
        List<Boleta> boletas = boletaRepository.findAll();
        // Carga explícitamente los detalles y el usuario para evitar LazyInitializationException
        boletas.forEach(boleta -> {
            if (boleta.getDetalles() != null) {
                boleta.getDetalles().size(); 
                boleta.getDetalles().forEach(detalle -> {
                    if (detalle.getProducto() != null) {
                        detalle.getProducto().getNombre();
                    }
                });
            }
            if (boleta.getUsuario() != null) {
                boleta.getUsuario().getUsername();
            }
        });
        return ResponseEntity.ok(boletas);
    }    
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\CarritoController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Entidad.CarritoItem;
import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Dto.PedidoRequest;
import com.example.VentasSql.Repository.CarritoRepository;
import com.example.VentasSql.Repository.ProductoRepository;
import com.example.VentasSql.Repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/carrito")
@RequiredArgsConstructor
public class CarritoController {

    private final CarritoRepository carritoRepository;
    private final ProductoRepository productoRepository;
    private final UserRepository userRepository;

    @PostMapping("/agregar")
    public ResponseEntity<?> agregarProducto(@RequestBody PedidoRequest pedidoRequest, @AuthenticationPrincipal UserDetails userDetails) {
        Optional<Producto> productoOpt = productoRepository.findById(pedidoRequest.getProductoId());
        if (productoOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Producto no encontrado");
        }
        var usuarioOpt = userRepository.findByUsername(userDetails.getUsername());
        if (usuarioOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Usuario no encontrado");
        }
        CarritoItem carritoItem = new CarritoItem();
        carritoItem.setProducto(productoOpt.get());
        carritoItem.setCantidad(pedidoRequest.getCantidad());
        carritoItem.setUsuario(usuarioOpt.get());
        carritoRepository.save(carritoItem);
        return ResponseEntity.ok().build();
    }

    @GetMapping
    public ResponseEntity<?> obtenerCarrito(@AuthenticationPrincipal UserDetails userDetails) {
        var usuarioOpt = userRepository.findByUsername(userDetails.getUsername());
        if (usuarioOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Usuario no encontrado");
        }
        var carritoItems = carritoRepository.findByUsuario(usuarioOpt.get());
        return ResponseEntity.ok(carritoItems);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> eliminarProducto(@PathVariable Long id) {
        if (!carritoRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        carritoRepository.deleteById(id);
        return ResponseEntity.ok().build();
    }

    @DeleteMapping("/limpiar")
    public ResponseEntity<?> limpiarCarrito(@AuthenticationPrincipal UserDetails userDetails) {
        try {
            var usuarioOpt = userRepository.findByUsername(userDetails.getUsername());
            if (usuarioOpt.isEmpty()) {
                return ResponseEntity.badRequest().body("Usuario no encontrado");
            }
            carritoRepository.deleteByUsuario(usuarioOpt.get());
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error al limpiar carrito: " + e.getMessage());
        }
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\CategoriaController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Entidad.Categoria;
import com.example.VentasSql.Repository.CategoriaRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/categorias")
@RequiredArgsConstructor

public class CategoriaController {
    private final CategoriaRepository categoriaRepository;

    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public Categoria crear(@RequestBody Categoria categoria) {
        return categoriaRepository.save(categoria);
    }

    @GetMapping
    @PreAuthorize("permitAll()")
    public List<Categoria> listar() {
        return categoriaRepository.findAll();
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public Categoria actualizar(@PathVariable Long id, @RequestBody Categoria data) {
        Categoria c = categoriaRepository.findById(id).orElseThrow();
        c.setNombre(data.getNombre());
        return categoriaRepository.save(c);
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public void eliminar(@PathVariable Long id) {
        categoriaRepository.deleteById(id);
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\HomeController.java -----

package com.example.VentasSql.Controller;


import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HomeController {
    @GetMapping("/home")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") 
    public String home(){
        return "¡Bienvenido! Acceso autorizado con token JWT";
    }
}



----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\MarcaController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Entidad.Marca;
import com.example.VentasSql.Repository.MarcaRepository;    
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/marcas")
@RequiredArgsConstructor

public class MarcaController {
    private final MarcaRepository marcaRepository;

    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public Marca crear(@RequestBody Marca marca) {
        return marcaRepository.save(marca);
    }

    @GetMapping
    @PreAuthorize("permitAll()")
    public List<Marca> listar() {
        return marcaRepository.findAll();
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public Marca actualizar(@PathVariable Long id, @RequestBody Marca data) {
        Marca m = marcaRepository.findById(id).orElseThrow();
        m.setNombre(data.getNombre());
        return marcaRepository.save(m);
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public void eliminar(@PathVariable Long id) {
        marcaRepository.deleteById(id);
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\PedidoController.java -----


package com.example.VentasSql.Controller;

import com.example.VentasSql.Dto.PedidoDto;
import com.example.VentasSql.Dto.PedidoRequest;
import com.example.VentasSql.Entidad.DetallePedido;
import com.example.VentasSql.Entidad.Pedido;
import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Repository.PedidoRepository;
import com.example.VentasSql.Repository.ProductoRepository;
import com.example.VentasSql.Repository.UserRepository;
import com.example.VentasSql.Service.BoletaPdfService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;


import java.math.BigDecimal;
import java.math.RoundingMode;
import java.security.Principal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/pedidos")
@RequiredArgsConstructor
public class PedidoController {

    private final PedidoRepository pedidoRepository;
    private final ProductoRepository productoRepository;
    private final UserRepository userRepository;
    private final BoletaPdfService boletaPdfService;

    private static final BigDecimal IGV_RATE = new BigDecimal("0.18");

    @PostMapping("/crear")
    @PreAuthorize("permitAll()")
    @Transactional
    public ResponseEntity<?> crearPedido(@Valid @RequestBody List<PedidoRequest> pedidos, Principal principal) {
        try {
            if (pedidos == null || pedidos.isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of("error", "La lista de pedidos no puede estar vacía."));
            }

            Uuser usuario = userRepository.findByUsername(principal.getName()).orElseThrow();

            Map<Long, Integer> productosEnPedido = new HashMap<>();
            for (PedidoRequest p : pedidos) {
                productosEnPedido.merge(p.getProductoId(), p.getCantidad(), Integer::sum);
            }

            List<DetallePedido> detallesPedido = new ArrayList<>();
            BigDecimal subtotalGeneral = BigDecimal.ZERO;
            StringBuilder mensajeStockInsuficiente = new StringBuilder();

            for (Map.Entry<Long, Integer> entry : productosEnPedido.entrySet()) {
                Long productoId = entry.getKey();
                Integer cantidadSolicitada = entry.getValue();

                Producto producto = productoRepository.findById(productoId).orElse(null);
                if (producto == null) {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body(Map.of("error", "Producto con ID " + productoId + " no encontrado."));
                }

                if (producto.getStock() < cantidadSolicitada) {
                    mensajeStockInsuficiente.append("No hay stock suficiente para el producto '")
                            .append(producto.getNombre())
                            .append("'. Stock disponible: ")
                            .append(producto.getStock())
                            .append(". Cantidad solicitada: ")
                            .append(cantidadSolicitada)
                            .append(".\n");
                } else {
                    BigDecimal precioUnitario = producto.getPrecio();
                    BigDecimal subtotalDetalle = precioUnitario.multiply(BigDecimal.valueOf(cantidadSolicitada));
                    subtotalGeneral = subtotalGeneral.add(subtotalDetalle);

                    DetallePedido detalle = new DetallePedido();
                    detalle.setProducto(producto);
                    detalle.setCantidad(cantidadSolicitada);
                    detalle.setPrecioUnitario(precioUnitario.doubleValue());
                    detalle.setSubtotalDetalle(subtotalDetalle.doubleValue());
                    detallesPedido.add(detalle);
                }
            }

            if (mensajeStockInsuficiente.length() > 0) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(Map.of("error", mensajeStockInsuficiente.toString()));
            }

            Pedido pedido = new Pedido();
            pedido.setFechaPedido(LocalDateTime.now());
            pedido.setUsuario(usuario);
            pedido.setDetalles(detallesPedido);
            pedido.setTotal(subtotalGeneral.setScale(2, RoundingMode.HALF_UP));
            detallesPedido.forEach(detalle -> detalle.setPedido(pedido));

            pedidoRepository.save(pedido);

            // Update stock
            for (DetallePedido detalle : detallesPedido) {
                Producto producto = detalle.getProducto();
                producto.setStock(producto.getStock() - detalle.getCantidad());
                productoRepository.save(producto);
            }

            return ResponseEntity.ok(Map.of("message", "Pedido creado con éxito", "pedidoId", pedido.getId()));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of("error", "Error al crear el pedido: " + e.getMessage()));
        }
    }

    @GetMapping("/historial")
    @PreAuthorize("hasAnyRole('COMPRADOR','ADMIN', 'USER')")
    public ResponseEntity<List<PedidoDto>> obtenerHistorialPedidos(Principal principal) {
        Uuser usuario = userRepository.findByUsername(principal.getName())
                                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Usuario no encontrado"));

        List<Pedido> historialEntidades = pedidoRepository.findByUsuario(usuario);

        // Mapear entidades a DTOs
        List<PedidoDto> historialDto = historialEntidades.stream()
                                                          .map(PedidoDto::new)
                                                          .collect(Collectors.toList());

        return ResponseEntity.ok(historialDto);
    }
    // Ejemplo en PedidoController.java (o BoletaController)
// @GetMapping("/pdf/{pedidoId}")
// public ResponseEntity<byte[]> generarPdfBoleta(@PathVariable Long pedidoId) {
//     try {
//         // 1. Buscar el pedido por ID
//         Pedido pedido = pedidoRepository.findById(pedidoId)
//             .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Pedido no encontrado"));

//         // 2. Lógica para generar el PDF (esto es solo un placeholder)
//         byte[] pdfContents = boletaPdfService.generarPdfBoleta(pedido);
//         HttpHeaders headers = new HttpHeaders();
//         headers.setContentType(MediaType.APPLICATION_PDF);
//         String filename = "boleta_" + pedidoId + ".pdf";
//         headers.setContentDispositionFormData("attachment", filename); // Para que el navegador lo descargue

//         return new ResponseEntity<>(pdfContents, headers, HttpStatus.OK);

//     } catch (Exception e) {
//         // Manejo de errores
//         return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                              .body(("Error al generar el PDF: " + e.getMessage()).getBytes());
//     }
// }
// Necesitarás implementar la función generarContenidoPdf(Pedido pedido)
// que use una librería de PDF para crear el archivo.
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\ProductoController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Service.ProductoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/productos")
public class ProductoController {

    @Autowired
    private ProductoService productoService;

    // --- Endpoints CRUD Básicos (ya existentes) ---

    // GET /productos - Obtener todos los productos
    @GetMapping
    @PreAuthorize("permitAll()") // Accesible por USER y ADMIN
    public ResponseEntity<List<Producto>> getAllProductos() {
        List<Producto> productos = productoService.getAllProductos();
        return new ResponseEntity<>(productos, HttpStatus.OK);
    }

    // GET /productos/{id} - Obtener un producto por ID
    @GetMapping("/{id}")
    @PreAuthorize("hasAnyRole('VISITANTE','COMPRADOR','USER', 'ADMIN')") // Accesible por USER y ADMIN
    public ResponseEntity<Producto> getProductoById(@PathVariable Long id) {
        return productoService.getProductoById(id)
                .map(producto -> new ResponseEntity<>(producto, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    // POST /productos - Crear un nuevo producto
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')") // Solo ADMIN puede crear productos
    public ResponseEntity<Producto> createProducto(@RequestBody Producto producto) {
        Producto newProducto = productoService.createProducto(producto);
        return new ResponseEntity<>(newProducto, HttpStatus.CREATED);
    }

    // PUT /productos/{id} - Actualizar un producto completo
    @PutMapping("/{id}")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") // Solo ADMIN puede actualizar productos completos
    public ResponseEntity<Producto> updateProducto(@PathVariable Long id, @RequestBody Producto productoDetails) {
        Producto updatedProducto = productoService.updateProducto(id, productoDetails);
        return updatedProducto != null ?
                new ResponseEntity<>(updatedProducto, HttpStatus.OK) :
                new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }

    // PUT /productos/{id}/stock - Actualizar el stock
    @PutMapping("/{id}/stock")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") // USER y ADMIN pueden actualizar stock
    public ResponseEntity<Producto> updateProductoStock(@PathVariable Long id, @RequestParam Integer nuevoStock) {
        return productoService.updateProductoStock(id, nuevoStock)
                .map(producto -> new ResponseEntity<>(producto, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    // PUT /productos/{id}/precio - Actualizar el precio
    @PutMapping("/{id}/precio")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") // USER y ADMIN pueden actualizar precio
    public ResponseEntity<Producto> updateProductoPrecio(@PathVariable Long id, @RequestParam Double nuevoPrecio) {
        return productoService.updateProductoPrecio(id, nuevoPrecio)
                .map(producto -> new ResponseEntity<>(producto, HttpStatus.OK))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    // DELETE /productos/{id} - Eliminar un producto
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')") // Solo ADMIN puede eliminar productos
    public ResponseEntity<Void> deleteProducto(@PathVariable Long id) {
        productoService.deleteProducto(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    // --- Nuevas Rutas ---

    /**
     * GET /productos/bajo-stock
     * Descripción: Obtiene todos los productos cuyo stock es menor a 5.
     * Permisos: Accesible para usuarios con rol 'USER' o 'ADMIN'.
     */
    @GetMapping("/bajo-stock")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')") // USER y ADMIN pueden ver el bajo stock
    public ResponseEntity<List<Producto>> getProductosConBajoStock() {
        List<Producto> productos = productoService.getProductosConBajoStock();
        return new ResponseEntity<>(productos, HttpStatus.OK);
    }

    /**
     * GET /productos/buscar
     * Descripción: Busca productos cuya descripción contenga la palabra clave especificada.
     * Ejemplo: /productos/buscar?keyword=telefono
     * Permisos: Accesible para usuarios con rol 'USER' o 'ADMIN'.
     */
    @GetMapping("/buscar")
    @PreAuthorize("permitAll()") // USER y ADMIN pueden buscar productos
    public ResponseEntity<List<Producto>> searchProductosByDescription(@RequestParam String keyword) {
        List<Producto> productos = productoService.searchProductosByDescription(keyword);
        return new ResponseEntity<>(productos, HttpStatus.OK);
    }

    
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\ResenaController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Entidad.Resena;
import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Repository.ResenaRepository;
import com.example.VentasSql.Repository.UserRepository;
import lombok.RequiredArgsConstructor;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.security.Principal;
import java.util.List;

@RestController
@RequestMapping("/reseñas")
@RequiredArgsConstructor
public class ResenaController {
    private final ResenaRepository resenaRepository;
    private final UserRepository userRepository;

    @PostMapping("/crear")
    @PreAuthorize("hasRole('COMPRADOR')")
    public ResponseEntity<String> crear(@RequestBody Resena resena, Principal principal) {
        Uuser usuario = userRepository.findByUsername(principal.getName()).orElseThrow();
        resena.setUsuario(usuario);
        resena.setAprobado(false);
        resenaRepository.save(resena);
        return ResponseEntity.ok("Reseña enviada para aprobación");
    }

    @GetMapping("/producto/{id}")
    @PreAuthorize("permitAll()") // Accesible por todos
    public List<Resena> verReseñas(@PathVariable Long id) {
        return resenaRepository.findByProductoIdAndAprobadoTrue(id);
    }

    @PutMapping("/moderar/{id}")
    @PreAuthorize("hasAnyRole('USER','ADMIN')")
    public ResponseEntity<String> aprobar(@PathVariable Long id) {
        Resena resena = resenaRepository.findById(id).orElseThrow();
        resena.setAprobado(true);
        resenaRepository.save(resena);
        return ResponseEntity.ok("Reseña aprobada");
    }
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> eliminarResena(@PathVariable Long id) {
        try {
            if (!resenaRepository.existsById(id)) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Reseña con ID " + id + " no encontrada.");
            }
            resenaRepository.deleteById(id);
            return ResponseEntity.ok("Reseña eliminada correctamente.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error al eliminar la reseña: " + e.getMessage());
        }
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Controller\UsuarioController.java -----

package com.example.VentasSql.Controller;

import com.example.VentasSql.Dto.AuthRequest;
import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Repository.UserRepository;
import lombok.RequiredArgsConstructor;
import com.example.VentasSql.Repository.UserRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import com.example.VentasSql.Seguridad.JwtUtil;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;



import java.security.Principal;
import java.util.List;

@RestController
@RequestMapping("/usuario")
@RequiredArgsConstructor
public class UsuarioController {
    private final PasswordEncoder passwordEncoder;
    private final UserRepository userRepository;
    private final JwtUtil jwtUtil;

    

    @GetMapping("/perfil")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<Uuser> getPerfil(Principal principal) {
        return userRepository.findByUsername(principal.getName())
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PutMapping("/perfil")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<String> updatePerfil(@RequestBody Uuser datos, Principal principal) {
        Uuser user = userRepository.findByUsername(principal.getName())
                .orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

        user.setNombre(datos.getNombre());
        user.setDireccion(datos.getDireccion());
        user.setTelefono(datos.getTelefono());
        userRepository.save(user);

        return ResponseEntity.ok("Perfil actualizado correctamente");
    }
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Uuser> crearUsuario(@RequestBody Uuser usuario) {
        Uuser nuevoUsuario = userRepository.save(usuario);
        return ResponseEntity.status(HttpStatus.CREATED).body(nuevoUsuario);
    }
    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> eliminarUsuario(@PathVariable Long id) {
        try {
            if (!userRepository.existsById(id)) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuario con ID " + id + " no encontrado.");
            }
            userRepository.deleteById(id);
            return ResponseEntity.ok("Usuario eliminado correctamente.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error al eliminar el usuario: " + e.getMessage());
        }
    }

    @GetMapping("/listar")
    @PreAuthorize("hasRole('ADMIN')")
    public List<Uuser> listarUsuarios() {
        return userRepository.findAll();
    }
    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Uuser> actualizarUsuario(@PathVariable Long id, @RequestBody Uuser usuario) {
        // Verificar si el usuario existe
        if (!userRepository.existsById(id)) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null); // 404 Not Found
        }
        // Actualizar el usuario
        usuario.setId(id); // Asegúrate de que el ID se establezca
        Uuser usuarioActualizado = userRepository.save(usuario);
        return ResponseEntity.ok(usuarioActualizado);
    }
    


}




----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\AuthRequest.java -----

package com.example.VentasSql.Dto;

import lombok.Data;

@Data

public class AuthRequest {
    private String username;
    private String password;

}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\AuthResponse.java -----

package com.example.VentasSql.Dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor

public class AuthResponse {
    private String token;

}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\DetallePedidoDto.java -----

package com.example.VentasSql.Dto;

import com.example.VentasSql.Entidad.DetallePedido;
import lombok.Data;

@Data
public class DetallePedidoDto {
    private Long id;
    private String producto;
    private Integer cantidad;
    private Double precioUnitario;
    private Double subtotalDetalle;

    // Aquí está la clave: este DTO de detalle NO tiene una referencia al Pedido padre.
    // Si la tuviera, tendríamos otro bucle.
    // private PedidoDto pedido; // ¡NO INCLUIR ESTO AQUÍ!

    public DetallePedidoDto(DetallePedido detalle) {
        this.id = detalle.getId();
        this.producto = detalle.getProducto() != null ? detalle.getProducto().getNombre() : "Producto Desconocido";
        this.cantidad = detalle.getCantidad();
        this.precioUnitario = detalle.getPrecioUnitario();
        this.subtotalDetalle = detalle.getSubtotalDetalle();
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\PedidoDto.java -----

package com.example.VentasSql.Dto;

import com.example.VentasSql.Entidad.Pedido;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;
import lombok.Data;

@Data
public class PedidoDto {
    private Long id;
    private LocalDateTime fechaEmision;
    private BigDecimal subtotal;
    private BigDecimal igv;
    private BigDecimal total;
    private String numeroBoleta;
    private String nombreUsuario;
    private List<DetallePedidoDto> detalles; // <-- Esto es una lista de DTOs de detalles, NO entidades

    public PedidoDto(Pedido pedido) {
        this.id = pedido.getId();
        this.fechaEmision = pedido.getFechaPedido();
        this.total = pedido.getTotal();

        BigDecimal igvRate = new BigDecimal("0.18");
        this.igv = pedido.getTotal().multiply(igvRate).divide(BigDecimal.ONE.add(igvRate), 2, java.math.RoundingMode.HALF_UP);
        this.subtotal = pedido.getTotal().subtract(this.igv);

        this.numeroBoleta = String.format("BOLETA-%06d", pedido.getId());

        this.nombreUsuario = pedido.getUsuario() != null ? pedido.getUsuario().getUsername() : "N/A";

        // Aquí es crucial: mapeamos las entidades DetallePedido a DetallePedidoDto
        // NO intentamos serializar la entidad Pedido dentro de DetallePedidoDto
        this.detalles = pedido.getDetalles() != null ?
                        pedido.getDetalles().stream()
                              .map(DetallePedidoDto::new) // <-- Llama al constructor del DTO de detalle
                              .collect(Collectors.toList()) :
                        List.of();
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\PedidoRequest.java -----

package com.example.VentasSql.Dto;


import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import lombok.Data;

@Data
public class PedidoRequest {

    @NotNull(message = "El ID del producto es obligatorio")
    private Long productoId;

    @NotNull(message = "La cantidad es obligatoria")
    @Positive(message = "La cantidad debe ser mayor a cero")
    private Integer cantidad;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Dto\RegisterRequest.java -----

package com.example.VentasSql.Dto;

import lombok.Data;
import com.example.VentasSql.Entidad.Role; 

@Data
public class RegisterRequest {
    private String username;
    private String password;
    private String nombre;
    private Role role; 
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Boleta.java -----

package com.example.VentasSql.Entidad;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Boleta {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String numeroBoleta;
    private LocalDateTime fechaEmision;
    private BigDecimal subtotal;
    private BigDecimal igv;
    private BigDecimal total;

    @ManyToOne(fetch = FetchType.LAZY) // Relación con el usuario (comprador)
    @JoinColumn(name = "user_id") // Columna en la tabla boleta que referencia al usuario
    private Uuser usuario; // Asegúrate de tener este campo

    @OneToMany(mappedBy = "boleta", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    @JsonManagedReference // Evita recursión infinita en JSON
    private List<DetalleBoleta> detalles;

    // Getters y Setters (si no usas Lombok @Data)
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\CarritoItem.java -----

package com.example.VentasSql.Entidad;
import com.example.VentasSql.Entidad.Producto;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import lombok.Data;

@Entity
@Data
public class CarritoItem {
    @Id @GeneratedValue
    private Long id;

    @ManyToOne
    private Uuser usuario;

    @ManyToOne
    private Producto producto;

    private Integer cantidad;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Categoria.java -----

package com.example.VentasSql.Entidad;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import lombok.Data;

@Entity
@Data
public class Categoria {
    @Id @GeneratedValue
    private Long id;
    private String nombre;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\DetalleBoleta.java -----

package com.example.VentasSql.Entidad;

import com.fasterxml.jackson.annotation.JsonBackReference;
import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.math.BigDecimal;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class DetalleBoleta {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "boleta_id")
    @JsonBackReference // Evita recursión infinita en JSON
    private Boleta boleta;

    @ManyToOne(fetch = FetchType.EAGER) // Producto podría ser EAGER si siempre lo necesitas cargado
    @JoinColumn(name = "producto_id")
    private Producto producto; // Asegúrate de que este tenga un getter para `nombre`

    private Integer cantidad;
    private BigDecimal precioUnitario;
    private BigDecimal subtotalDetalle;

    // Getters y Setters (si no usas Lombok @Data)
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\DetallePedido.java -----

package com.example.VentasSql.Entidad;

import com.example.VentasSql.Entidad.Producto;
import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "detalle_pedido")
@Data
@NoArgsConstructor
public class DetallePedido {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "pedido_id")
    private Pedido pedido;

    @ManyToOne
    @JoinColumn(name = "producto_id")
    private Producto producto;

    private Integer cantidad;

    private Double precioUnitario;

    private Double subtotalDetalle;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Marca.java -----

package com.example.VentasSql.Entidad;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Data;

@Entity
@Data
public class Marca {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nombre;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Pedido.java -----

package com.example.VentasSql.Entidad;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Data 
@NoArgsConstructor
@AllArgsConstructor
public class Pedido {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToMany(mappedBy = "pedido", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<DetallePedido> detalles;

    @ManyToOne
    private Uuser usuario;

    private LocalDateTime fechaPedido;

    private BigDecimal total;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Producto.java -----

package com.example.VentasSql.Entidad;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.math.BigDecimal;

import com.example.VentasSql.Entidad.Categoria;
import com.example.VentasSql.Entidad.Marca;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Producto {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)    
    private Long id;

    private String nombre;
    private Integer stock;
    private String descripcion;
    private BigDecimal precio;

    @ManyToOne
    private Marca marca;

    @ManyToOne
    private Categoria categoria;

    
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Resena.java -----

package com.example.VentasSql.Entidad;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Entidad.Uuser; 

@Entity
@Data

public class Resena {
    @Id @GeneratedValue
    private Long id;

    @ManyToOne
    private Uuser usuario;

    @ManyToOne
    private Producto producto;

    private String comentario;
    private Integer puntuacion; // 1-5
    private boolean aprobado = false;
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Role.java -----

package com.example.VentasSql.Entidad;

public enum Role {
    VISITANTE,
    COMPRADOR,
    USER,
    ADMIN
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Entidad\Uuser.java -----

package com.example.VentasSql.Entidad;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import com.example.VentasSql.Entidad.Role; 

@Data
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Uuser {
    @Id @GeneratedValue
    private Long id;
    private String username;
    private String password;

    private String nombre;
    private String direccion;
    private String telefono;


    @Enumerated(EnumType.STRING) 
    private Role role; 
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\BoletaRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Boleta;
import com.example.VentasSql.Entidad.Uuser;
import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;


public interface BoletaRepository extends JpaRepository<Boleta, Long> {
    Boleta findTopByOrderByFechaEmisionDesc(); 
    List<Boleta> findByUsuario(Uuser usuario);

}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\CarritoRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.CarritoItem;
import com.example.VentasSql.Entidad.Uuser;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;
import org.springframework.transaction.annotation.Transactional;

public interface CarritoRepository extends JpaRepository<CarritoItem, Long> {
    List<CarritoItem> findByUsuario(Uuser usuario);
    @Transactional
    void deleteByUsuario(Uuser usuario);
     // Asegura que la operación de eliminación se ejecute dentro de una transacción
    
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\CategoriaRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Categoria;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CategoriaRepository extends JpaRepository<Categoria, Long> {}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\DetalleBoletaRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.DetalleBoleta;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DetalleBoletaRepository extends JpaRepository<DetalleBoleta, Long> {
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\MarcaRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Marca;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MarcaRepository extends JpaRepository<Marca, Long> {}



----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\PedidoRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Pedido;
import com.example.VentasSql.Entidad.Uuser;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface PedidoRepository extends JpaRepository<Pedido, Long> {
    List<Pedido> findByUsuario(Uuser usuario);
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\ProductoRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Producto;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ProductoRepository extends JpaRepository<Producto, Long> {

    // Consulta ya existente para productos con bajo stock
    @Query("SELECT p FROM Producto p WHERE p.stock < 5")
    List<Producto> findProductosConBajoStock();

    // Nueva consulta para buscar productos cuya descripción contenga una palabra clave (ignorando mayúsculas/minúsculas)
    // Spring Data JPA puede derivar esta consulta automáticamente por el nombre del método
    List<Producto> findByDescripcionContainingIgnoreCase(String keyword);

    // Opcional: Si prefieres JPQL explícito para la búsqueda por descripción
    /*
    @Query("SELECT p FROM Producto p WHERE LOWER(p.descripcion) LIKE LOWER(CONCAT('%', :keyword, '%'))")
    List<Producto> buscarPorDescripcion(@Param("keyword") String keyword);
    */
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\ResenaRepository.java -----

package com.example.VentasSql.Repository;

import com.example.VentasSql.Entidad.Resena;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;


public interface ResenaRepository extends JpaRepository<Resena, Long> {
    List<Resena> findByProductoIdAndAprobadoTrue(Long productoId);
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Repository\UserRepository.java -----

package com.example.VentasSql.Repository;
import java.util.List;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.VentasSql.Entidad.Uuser;


public interface UserRepository extends JpaRepository<Uuser, Long>{
    Optional <Uuser> findByUsername (String username);
    List<Uuser> findAll();
    Uuser save(Uuser user);


}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Seguridad\JwtFilter.java -----

package com.example.VentasSql.Seguridad;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.Collections;
import org.springframework.security.core.authority.SimpleGrantedAuthority;


@Component
@RequiredArgsConstructor
public class JwtFilter implements Filter {
    private final JwtUtil jwtUtil;
    private final UserDetailsServiceImpl userDetailsService;

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)
            throws IOException, ServletException {

        HttpServletRequest req = (HttpServletRequest) request;
        String auth = req.getHeader("Authorization");

        System.out.println("Header Authorization: " + auth);

        String username = null;
        String token = null;
        String role = null;

        if (auth != null && auth.startsWith("Bearer ")) {
            token = auth.substring(7);
            try {
                username = jwtUtil.extractUsername(token);
                role = jwtUtil.extractRole(token); // Extraemos el rol
            } catch (Exception e) {
                System.out.println("Error al extraer username o rol del token: " + e.getMessage());
            }
        }

        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);

            if (jwtUtil.validateToken(token)) {
                System.out.println("Token válido para usuario: " + username + " con rol: " + role);

                
                SimpleGrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + role);
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                        userDetails, null, Collections.singletonList(authority)); 
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(req));
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }
        filterChain.doFilter(request, response);
    }
}



----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Seguridad\JwtUtil.java -----

package com.example.VentasSql.Seguridad;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;


@Component
public class JwtUtil {
    @Value("${jwt.secret}")
    private String secret;

    @Value("${jwt.expiration}")
    private long expiration;

    private Key secretKey;

    @PostConstruct
    public void init(){
        this.secretKey = Keys.hmacShaKeyFor(secret.getBytes());
    }

    
    public String generateToken(String username, String role){
        Map<String, Object> claims = new HashMap<>();
        claims.put("role", role); 
        return Jwts.builder()
                .setClaims(claims) 
                .setSubject(username)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(secretKey, SignatureAlgorithm.HS512)
                .compact();
    }

    public String extractUsername(String token){
        return extractClaim(token, Claims::getSubject);
    }

    public String extractRole(String token){
        return extractClaim(token, claims -> claims.get("role", String.class));
    }

    public Date extractExpiration(String token){
        return extractClaim(token, Claims::getExpiration);
    }

    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver){
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }

    private Claims extractAllClaims(String token){
        return Jwts.parserBuilder()
                .setSigningKey(secretKey)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    private Boolean isTokenExpired(String token){
        return extractExpiration(token).before(new Date());
    }

    public boolean validateToken(String token){
        try{
            Jwts.parserBuilder()
                    .setSigningKey(secretKey)
                    .build()
                    .parseClaimsJws(token);
            return !isTokenExpired(token); 
        } catch (Exception e){
            System.out.println("Error al validar el token: " + e.getMessage());
            return false;
        }
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Seguridad\SecurityConfig.java -----

package com.example.VentasSql.Seguridad;

import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity; 
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;

import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import java.util.Arrays;

@Configuration
@RequiredArgsConstructor
@EnableMethodSecurity(prePostEnabled = true) 
public class SecurityConfig {

    private final JwtFilter jwtFilter;
    private final UserDetailsService userDetailsService;

    @Bean
    public DaoAuthenticationProvider authenticationProvider(){
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    @Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    return http
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .csrf(csrf->csrf.disable())
            .authorizeHttpRequests(auth->auth
                    .requestMatchers(
                            "/registro", "/auth/login", "/login",
                            "/registro-comprador",
                            "/productos", "/productos/**",
                            "/marcas", "/marcas/**", 
                            "/categorias", "/categorias/**",
                            "/boletas/admin/all" ,
                            "/carrito/**","/reseñas/producto/**").permitAll()                        
                    .anyRequest().authenticated()
            )
            .sessionManagement(sess->sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class)
            .build();
}

@Bean
public CorsConfigurationSource corsConfigurationSource() {
    CorsConfiguration configuration = new CorsConfiguration();
    configuration.setAllowedOrigins(Arrays.asList("http://localhost:4200"));
    configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
    configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));
    configuration.setExposedHeaders(Arrays.asList("Authorization"));
    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration("/**", configuration);
    return source;
}

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Seguridad\UserDetailsServiceImpl.java -----

package com.example.VentasSql.Seguridad;

import com.example.VentasSql.Entidad.Uuser;
import com.example.VentasSql.Repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class UserDetailsServiceImpl implements UserDetailsService {

    private final UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        Uuser user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("Usuario no encontrado: " + username));

        
        List<GrantedAuthority> authorities = Collections.singletonList(new SimpleGrantedAuthority("ROLE_" + user.getRole().name()));

        return new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(),
                authorities 
        );
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Service\BoletaPdfService.java -----

package com.example.VentasSql.Service; // O el paquete que elijas

import com.example.VentasSql.Entidad.Boleta;
import com.example.VentasSql.Entidad.DetalleBoleta;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;

@Service
public class BoletaPdfService {

    public byte[] generarPdfBoleta(Boleta boleta) throws DocumentException {
        // Validación básica
        if (boleta == null) {
            throw new IllegalArgumentException("La boleta no puede ser nula para generar el PDF.");
        }

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        Document document = new Document();

        try {
            PdfWriter.getInstance(document, baos);
            document.open();

            // Título
            document.add(new Paragraph("BOLETA DE VENTA"));
            document.add(new Paragraph("------------------------------------------------------------------"));
            document.add(new Paragraph("Número de Boleta: " + boleta.getNumeroBoleta()));
            document.add(new Paragraph("Fecha de Emisión: " + boleta.getFechaEmision().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))));
            
            // Asumiendo que Boleta puede tener un usuario asociado
            if (boleta.getUsuario() != null && boleta.getUsuario().getUsername() != null) {
                 document.add(new Paragraph("Cliente: " + boleta.getUsuario().getUsername()));
            } else {
                 document.add(new Paragraph("Cliente: (No especificado)"));
            }

            document.add(new Paragraph("------------------------------------------------------------------"));
            document.add(new Paragraph("Detalle de Productos:"));
            document.add(new Paragraph(" ")); // Espacio

            // Tabla de productos
            PdfPTable table = new PdfPTable(4); // 4 columnas: Producto, Cantidad, Precio Unitario, Subtotal
            table.setWidthPercentage(100);
            table.setSpacingBefore(10f);
            table.setSpacingAfter(10f);

            // Encabezados de la tabla
            table.addCell(new PdfPCell(new Phrase("Producto")));
            table.addCell(new PdfPCell(new Phrase("Cantidad")));
            table.addCell(new PdfPCell(new Phrase("P. Unitario")));
            table.addCell(new PdfPCell(new Phrase("Subtotal")));

            // Filas de la tabla
            for (DetalleBoleta detalle : boleta.getDetalles()) {
                table.addCell(new PdfPCell(new Phrase(detalle.getProducto().getNombre())));
                table.addCell(new PdfPCell(new Phrase(String.valueOf(detalle.getCantidad()))));
                table.addCell(new PdfPCell(new Phrase("S/ " + detalle.getPrecioUnitario().setScale(2, BigDecimal.ROUND_HALF_UP))));
                table.addCell(new PdfPCell(new Phrase("S/ " + detalle.getSubtotalDetalle().setScale(2, BigDecimal.ROUND_HALF_UP))));
            }
            document.add(table);

            // Totales
            document.add(new Paragraph(" ")); // Espacio
            document.add(new Paragraph("Subtotal: S/ " + boleta.getSubtotal().setScale(2, BigDecimal.ROUND_HALF_UP)));
            document.add(new Paragraph("IGV (18%): S/ " + boleta.getIgv().setScale(2, BigDecimal.ROUND_HALF_UP)));
            document.add(new Paragraph("Total a Pagar: S/ " + boleta.getTotal().setScale(2, BigDecimal.ROUND_HALF_UP)));
            document.add(new Paragraph("------------------------------------------------------------------"));
            document.add(new Paragraph("Gracias por su compra!"));

        } finally {
            document.close();
        }

        return baos.toByteArray();
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\Service\ProductoService.java -----

package com.example.VentasSql.Service;

import com.example.VentasSql.Entidad.Producto;
import com.example.VentasSql.Repository.ProductoRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.VentasSql.Repository.MarcaRepository;
import com.example.VentasSql.Repository.CategoriaRepository;



import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import jakarta.persistence.Entity;


@Service
public class ProductoService {

    @Autowired
    private ProductoRepository productoRepository;

    // Método para obtener todos los productos
    public List<Producto> getAllProductos() {
        return productoRepository.findAll();
    }

    // Método para obtener un producto por ID
    public Optional<Producto> getProductoById(Long id) {
        return productoRepository.findById(id);
    }
    @Autowired
    private MarcaRepository marcaRepository;
    @Autowired
    private CategoriaRepository categoriaRepository;
    

    // Método para crear un producto
    @Transactional
    public Producto createProducto(Producto producto) {
            // Asegurar que Marca y Categoria se carguen por ID si vienen solo con ID
            if (producto.getMarca() != null && producto.getMarca().getId() != null) {
                marcaRepository.findById(producto.getMarca().getId())
                    .ifPresent(producto::setMarca);
            }
            if (producto.getCategoria() != null && producto.getCategoria().getId() != null) {
                categoriaRepository.findById(producto.getCategoria().getId())
                    .ifPresent(producto::setCategoria);
            }
            return productoRepository.save(producto);
        }

    // Método para actualizar un producto (ejemplo de @Transactional si actualiza entidades relacionadas)
    // Para una simple actualización, @Transactional es opcional pero buena práctica
    @Transactional
        public Producto updateProducto(Long id, Producto productoDetails) {
            return productoRepository.findById(id).map(producto -> {
                producto.setNombre(productoDetails.getNombre());
                producto.setStock(productoDetails.getStock());
                producto.setDescripcion(productoDetails.getDescripcion());
                producto.setPrecio(productoDetails.getPrecio());
                // Actualizar Marca y Categoria si se proporcionan
                if (productoDetails.getMarca() != null && productoDetails.getMarca().getId() != null) {
                    marcaRepository.findById(productoDetails.getMarca().getId())
                        .ifPresent(producto::setMarca);
                } else if (productoDetails.getMarca() == null) { // Si se envía null, desasociar
                    producto.setMarca(null);
                }
                if (productoDetails.getCategoria() != null && productoDetails.getCategoria().getId() != null) {
                    categoriaRepository.findById(productoDetails.getCategoria().getId())
                        .ifPresent(producto::setCategoria);
                } else if (productoDetails.getCategoria() == null) { // Si se envía null, desasociar
                    producto.setCategoria(null);
                }
                return productoRepository.save(producto);
            }).orElse(null);
        }

    // Método para actualizar el stock de un producto
    @Transactional
    public Optional<Producto> updateProductoStock(Long id, Integer nuevoStock) {
        return productoRepository.findById(id).map(producto -> {
            producto.setStock(nuevoStock);
            return productoRepository.save(producto);
        });
    }

    // Método para actualizar el precio de un producto
    @Transactional
    public Optional<Producto> updateProductoPrecio(Long id, Double nuevoPrecio) {
        return productoRepository.findById(id).map(producto -> {
            producto.setPrecio(BigDecimal.valueOf(nuevoPrecio));
            return productoRepository.save(producto);
        });
    }

    // Método para eliminar un producto
    @Transactional
    public void deleteProducto(Long id) {
        productoRepository.deleteById(id);
    }

    // --- Nuevos Métodos para las Consultas Personalizadas ---

    // Método para obtener productos con menos de 5 de stock
    public List<Producto> getProductosConBajoStock() {
        return productoRepository.findProductosConBajoStock();
    }

    // Método para buscar productos por palabra clave en la descripción
    public List<Producto> searchProductosByDescription(String keyword) {
        return productoRepository.findByDescripcionContainingIgnoreCase(keyword);
        // Si usaste el método @Query con @Param, sería:
        // return productoRepository.buscarPorDescripcion(keyword);
    }
}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\main\java\com\example\VentasSql\VentasSqlApplication.java -----

package com.example.VentasSql;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class VentasSqlApplication {

	public static void main(String[] args) {
		SpringApplication.run(VentasSqlApplication.class, args);
	}

}


----- ARCHIVO: D:\Universidad_UTP\Desarrollo Web Integrado\Proyectofinal\App-VentaOnline\VentasSql\src\test\java\com\example\VentasSql\VentasSqlApplicationTests.java -----

package com.example.VentasSql;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class VentasSqlApplicationTests {

	@Test
	void contextLoads() {
	}

}
